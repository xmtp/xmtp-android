// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.xmtpv3;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
                throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
            }
        }

        internal fun create(capacity: Int, len: Int, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity
            buf.len = len
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Byte);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_xmtpv3"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "xmtpv3")
                .also { lib: UniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                    uniffiCallbackInterfaceFfiInboxOwner.register(lib)
                    uniffiCallbackInterfaceFfiLogger.register(lib)
                    uniffiCallbackInterfaceFfiMessageCallback.register(lib)
                }
        }

        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_xmtpv3_fn_clone_fficonversations(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_free_fficonversations(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_fficonversations_create_group(`ptr`: Pointer,`accountAddresses`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_fficonversations_list(`ptr`: Pointer,`opts`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_fficonversations_sync(`ptr`: Pointer,
    ): Pointer
    fun uniffi_xmtpv3_fn_clone_ffigroup(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_free_ffigroup(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_ffigroup_add_members(`ptr`: Pointer,`accountAddresses`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffigroup_created_at_ns(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Long
    fun uniffi_xmtpv3_fn_method_ffigroup_find_messages(`ptr`: Pointer,`opts`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_method_ffigroup_id(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_method_ffigroup_list_members(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_method_ffigroup_remove_members(`ptr`: Pointer,`accountAddresses`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffigroup_send(`ptr`: Pointer,`contentBytes`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffigroup_stream(`ptr`: Pointer,`messageCallback`: Long,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffigroup_sync(`ptr`: Pointer,
    ): Pointer
    fun uniffi_xmtpv3_fn_clone_ffimessagestreamcloser(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_free_ffimessagestreamcloser(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_ffimessagestreamcloser_close(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_clone_ffiv2apiclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_free_ffiv2apiclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_batch_query(`ptr`: Pointer,`req`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_publish(`ptr`: Pointer,`request`: RustBuffer.ByValue,`authToken`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_query(`ptr`: Pointer,`request`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_set_app_version(`ptr`: Pointer,`version`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_subscribe(`ptr`: Pointer,`request`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_clone_ffiv2subscription(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_free_ffiv2subscription(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_ffiv2subscription_end(`ptr`: Pointer,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffiv2subscription_next(`ptr`: Pointer,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffiv2subscription_update(`ptr`: Pointer,`req`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_clone_ffixmtpclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_free_ffixmtpclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_fn_method_ffixmtpclient_account_address(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_method_ffixmtpclient_can_message(`ptr`: Pointer,`accountAddresses`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffixmtpclient_conversations(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffixmtpclient_register_identity(`ptr`: Pointer,`recoverableWalletSignature`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_method_ffixmtpclient_text_to_sign(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_init_callback_ffiinboxowner(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_xmtpv3_fn_init_callback_ffilogger(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_xmtpv3_fn_init_callback_ffimessagecallback(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_xmtpv3_fn_func_create_client(`logger`: Long,`host`: RustBuffer.ByValue,`isSecure`: Byte,`db`: RustBuffer.ByValue,`encryptionKey`: RustBuffer.ByValue,`accountAddress`: RustBuffer.ByValue,`legacyIdentitySource`: RustBuffer.ByValue,`legacySignedPrivateKeyProto`: RustBuffer.ByValue,
    ): Pointer
    fun uniffi_xmtpv3_fn_func_create_v2_client(`host`: RustBuffer.ByValue,`isSecure`: Byte,
    ): Pointer
    fun uniffi_xmtpv3_fn_func_diffie_hellman_k256(`privateKeyBytes`: RustBuffer.ByValue,`publicKeyBytes`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_generate_private_preferences_topic_identifier(`privateKey`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_keccak256(`input`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_public_key_from_private_key_k256(`privateKeyBytes`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_recover_address(`signatureBytes`: RustBuffer.ByValue,`predigestMessage`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_recover_public_key_k256_keccak256(`message`: RustBuffer.ByValue,`signature`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_recover_public_key_k256_sha256(`message`: RustBuffer.ByValue,`signature`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_sha256(`input`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_user_preferences_decrypt(`publicKey`: RustBuffer.ByValue,`privateKey`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_user_preferences_encrypt(`publicKey`: RustBuffer.ByValue,`privateKey`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun uniffi_xmtpv3_fn_func_verify_k256_sha256(`signedBy`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,`signature`: RustBuffer.ByValue,`recoveryId`: Byte,uniffi_out_err: UniffiRustCallStatus,
    ): Byte
    fun ffi_xmtpv3_rustbuffer_alloc(`size`: Int,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_xmtpv3_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_xmtpv3_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun ffi_xmtpv3_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_xmtpv3_rust_future_poll_u8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_u8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Byte
    fun ffi_xmtpv3_rust_future_poll_i8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_i8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Byte
    fun ffi_xmtpv3_rust_future_poll_u16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_u16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Short
    fun ffi_xmtpv3_rust_future_poll_i16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_i16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Short
    fun ffi_xmtpv3_rust_future_poll_u32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_u32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Int
    fun ffi_xmtpv3_rust_future_poll_i32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_i32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Int
    fun ffi_xmtpv3_rust_future_poll_u64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_u64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Long
    fun ffi_xmtpv3_rust_future_poll_i64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_i64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Long
    fun ffi_xmtpv3_rust_future_poll_f32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_f32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Float
    fun ffi_xmtpv3_rust_future_poll_f64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_f64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Double
    fun ffi_xmtpv3_rust_future_poll_pointer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_pointer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Pointer
    fun ffi_xmtpv3_rust_future_poll_rust_buffer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_rust_buffer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue
    fun ffi_xmtpv3_rust_future_poll_void(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_xmtpv3_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_xmtpv3_rust_future_complete_void(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus,
    ): Unit
    fun uniffi_xmtpv3_checksum_func_create_client(
    ): Short
    fun uniffi_xmtpv3_checksum_func_create_v2_client(
    ): Short
    fun uniffi_xmtpv3_checksum_func_diffie_hellman_k256(
    ): Short
    fun uniffi_xmtpv3_checksum_func_generate_private_preferences_topic_identifier(
    ): Short
    fun uniffi_xmtpv3_checksum_func_keccak256(
    ): Short
    fun uniffi_xmtpv3_checksum_func_public_key_from_private_key_k256(
    ): Short
    fun uniffi_xmtpv3_checksum_func_recover_address(
    ): Short
    fun uniffi_xmtpv3_checksum_func_recover_public_key_k256_keccak256(
    ): Short
    fun uniffi_xmtpv3_checksum_func_recover_public_key_k256_sha256(
    ): Short
    fun uniffi_xmtpv3_checksum_func_sha256(
    ): Short
    fun uniffi_xmtpv3_checksum_func_user_preferences_decrypt(
    ): Short
    fun uniffi_xmtpv3_checksum_func_user_preferences_encrypt(
    ): Short
    fun uniffi_xmtpv3_checksum_func_verify_k256_sha256(
    ): Short
    fun uniffi_xmtpv3_checksum_method_fficonversations_create_group(
    ): Short
    fun uniffi_xmtpv3_checksum_method_fficonversations_list(
    ): Short
    fun uniffi_xmtpv3_checksum_method_fficonversations_sync(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_add_members(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_created_at_ns(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_find_messages(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_id(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_list_members(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_remove_members(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_send(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_stream(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffigroup_sync(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffimessagestreamcloser_close(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_batch_query(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_publish(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_query(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_set_app_version(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_subscribe(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2subscription_end(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2subscription_next(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiv2subscription_update(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_account_address(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_can_message(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_conversations(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_register_identity(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_text_to_sign(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiinboxowner_get_address(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffiinboxowner_sign(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffilogger_log(
    ): Short
    fun uniffi_xmtpv3_checksum_method_ffimessagecallback_on_message(
    ): Short
    fun ffi_xmtpv3_uniffi_contract_version(
    ): Int

}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_xmtpv3_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_xmtpv3_checksum_func_create_client() != 54065.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_create_v2_client() != 10517.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_diffie_hellman_k256() != 49253.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_generate_private_preferences_topic_identifier() != 21433.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_keccak256() != 26197.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_public_key_from_private_key_k256() != 5981.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_recover_address() != 47454.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_recover_public_key_k256_keccak256() != 30146.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_recover_public_key_k256_sha256() != 18341.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_sha256() != 13129.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_user_preferences_decrypt() != 23231.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_user_preferences_encrypt() != 56896.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_verify_k256_sha256() != 5324.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_create_group() != 57295.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_list() != 6933.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_sync() != 9054.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_add_members() != 64665.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_created_at_ns() != 4894.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_find_messages() != 62522.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_id() != 36764.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_list_members() != 61034.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_remove_members() != 23893.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_send() != 11094.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_stream() != 7646.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigroup_sync() != 24219.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffimessagestreamcloser_close() != 21619.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_batch_query() != 30794.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_publish() != 10321.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_query() != 23218.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_set_app_version() != 37400.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_subscribe() != 14461.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscription_end() != 54394.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscription_next() != 27536.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscription_update() != 65315.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_account_address() != 59401.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_can_message() != 18126.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_conversations() != 47463.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_register_identity() != 39876.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_text_to_sign() != 13013.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiinboxowner_get_address() != 2205.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiinboxowner_sign() != 30268.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffilogger_log() != 56011.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffimessagecallback_on_message() != 2749.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniFfiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallback: UniFffiRustFutureContinuationCallbackType {
    override fun callback(continuationHandle: USize, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(continuationHandle)?.resume(pollResult)
    }
}

internal suspend fun<T, F, E: Exception> uniffiRustCallAsync(
    rustFuture: Pointer,
    pollFunc: (Pointer, UniFffiRustFutureContinuationCallbackType, USize) -> Unit,
    completeFunc: (Pointer, UniffiRustCallStatus) -> F,
    freeFunc: (Pointer) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallback,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}


// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//



// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}
public interface FfiConversationsInterface {

    suspend fun `createGroup`(`accountAddresses`: List<String>): FfiGroup

    suspend fun `list`(`opts`: FfiListConversationsOptions): List<FfiGroup>

    suspend fun `sync`()

    companion object
}

open class FfiConversations: Disposable, AutoCloseable, FfiConversationsInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_fficonversations(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_fficonversations(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createGroup`(`accountAddresses`: List<String>) : FfiGroup {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_create_group(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiGroup.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `list`(`opts`: FfiListConversationsOptions) : List<FfiGroup> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_list(
                    thisPtr,
                    FfiConverterTypeFfiListConversationsOptions.lower(`opts`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceTypeFfiGroup.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sync`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_sync(
                    thisPtr,

                    )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }



    companion object

}

public object FfiConverterTypeFfiConversations: FfiConverter<FfiConversations, Pointer> {

    override fun lower(value: FfiConversations): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiConversations {
        return FfiConversations(value)
    }

    override fun read(buf: ByteBuffer): FfiConversations {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiConversations) = 8

    override fun write(value: FfiConversations, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//



public interface FfiGroupInterface {

    suspend fun `addMembers`(`accountAddresses`: List<String>)

    fun `createdAtNs`(): Long

    fun `findMessages`(`opts`: FfiListMessagesOptions): List<FfiMessage>

    fun `id`(): ByteArray

    fun `listMembers`(): List<FfiGroupMember>

    suspend fun `removeMembers`(`accountAddresses`: List<String>)

    suspend fun `send`(`contentBytes`: ByteArray)

    suspend fun `stream`(`messageCallback`: FfiMessageCallback): FfiMessageStreamCloser

    suspend fun `sync`()

    companion object
}

open class FfiGroup: Disposable, AutoCloseable, FfiGroupInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffigroup(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffigroup(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addMembers`(`accountAddresses`: List<String>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_add_members(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }
    override fun `createdAtNs`(): Long =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_created_at_ns(it,

                    _status)
            }
        }.let {
            FfiConverterLong.lift(it)
        }


    @Throws(GenericException::class)override fun `findMessages`(`opts`: FfiListMessagesOptions): List<FfiMessage> =
        callWithPointer {
            uniffiRustCallWithError(GenericException) { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_find_messages(it,
                    FfiConverterTypeFfiListMessagesOptions.lower(`opts`),
                    _status)
            }
        }.let {
            FfiConverterSequenceTypeFfiMessage.lift(it)
        }

    override fun `id`(): ByteArray =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_id(it,

                    _status)
            }
        }.let {
            FfiConverterByteArray.lift(it)
        }


    @Throws(GenericException::class)override fun `listMembers`(): List<FfiGroupMember> =
        callWithPointer {
            uniffiRustCallWithError(GenericException) { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_list_members(it,

                    _status)
            }
        }.let {
            FfiConverterSequenceTypeFfiGroupMember.lift(it)
        }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeMembers`(`accountAddresses`: List<String>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_remove_members(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `send`(`contentBytes`: ByteArray) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_send(
                    thisPtr,
                    FfiConverterByteArray.lower(`contentBytes`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `stream`(`messageCallback`: FfiMessageCallback) : FfiMessageStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_stream(
                    thisPtr,
                    FfiConverterTypeFfiMessageCallback.lower(`messageCallback`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiMessageStreamCloser.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sync`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigroup_sync(
                    thisPtr,

                    )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }



    companion object

}

public object FfiConverterTypeFfiGroup: FfiConverter<FfiGroup, Pointer> {

    override fun lower(value: FfiGroup): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiGroup {
        return FfiGroup(value)
    }

    override fun read(buf: ByteBuffer): FfiGroup {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiGroup) = 8

    override fun write(value: FfiGroup, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//



public interface FfiMessageStreamCloserInterface {

    fun `close`()

    companion object
}

open class FfiMessageStreamCloser: Disposable, AutoCloseable, FfiMessageStreamCloserInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffimessagestreamcloser(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffimessagestreamcloser(pointer!!, status)
        }
    }

    override fun `close`() =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffimessagestreamcloser_close(it,

                    _status)
            }
        }





    companion object

}

public object FfiConverterTypeFfiMessageStreamCloser: FfiConverter<FfiMessageStreamCloser, Pointer> {

    override fun lower(value: FfiMessageStreamCloser): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiMessageStreamCloser {
        return FfiMessageStreamCloser(value)
    }

    override fun read(buf: ByteBuffer): FfiMessageStreamCloser {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiMessageStreamCloser) = 8

    override fun write(value: FfiMessageStreamCloser, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//



public interface FfiV2ApiClientInterface {

    suspend fun `batchQuery`(`req`: FfiV2BatchQueryRequest): FfiV2BatchQueryResponse

    suspend fun `publish`(`request`: FfiPublishRequest, `authToken`: String)

    suspend fun `query`(`request`: FfiV2QueryRequest): FfiV2QueryResponse

    fun `setAppVersion`(`version`: String)

    suspend fun `subscribe`(`request`: FfiV2SubscribeRequest): FfiV2Subscription

    companion object
}

open class FfiV2ApiClient: Disposable, AutoCloseable, FfiV2ApiClientInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffiv2apiclient(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffiv2apiclient(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `batchQuery`(`req`: FfiV2BatchQueryRequest) : FfiV2BatchQueryResponse {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_batch_query(
                    thisPtr,
                    FfiConverterTypeFfiV2BatchQueryRequest.lower(`req`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiV2BatchQueryResponse.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `publish`(`request`: FfiPublishRequest, `authToken`: String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_publish(
                    thisPtr,
                    FfiConverterTypeFfiPublishRequest.lower(`request`),FfiConverterString.lower(`authToken`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `query`(`request`: FfiV2QueryRequest) : FfiV2QueryResponse {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_query(
                    thisPtr,
                    FfiConverterTypeFfiV2QueryRequest.lower(`request`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiV2QueryResponse.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }
    override fun `setAppVersion`(`version`: String) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_set_app_version(it,
                    FfiConverterString.lower(`version`),
                    _status)
            }
        }



    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `subscribe`(`request`: FfiV2SubscribeRequest) : FfiV2Subscription {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_subscribe(
                    thisPtr,
                    FfiConverterTypeFfiV2SubscribeRequest.lower(`request`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiV2Subscription.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }



    companion object

}

public object FfiConverterTypeFfiV2ApiClient: FfiConverter<FfiV2ApiClient, Pointer> {

    override fun lower(value: FfiV2ApiClient): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiV2ApiClient {
        return FfiV2ApiClient(value)
    }

    override fun read(buf: ByteBuffer): FfiV2ApiClient {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiV2ApiClient) = 8

    override fun write(value: FfiV2ApiClient, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//



public interface FfiV2SubscriptionInterface {

    suspend fun `end`()

    suspend fun `next`(): FfiEnvelope

    suspend fun `update`(`req`: FfiV2SubscribeRequest)

    companion object
}

open class FfiV2Subscription: Disposable, AutoCloseable, FfiV2SubscriptionInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffiv2subscription(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffiv2subscription(pointer!!, status)
        }
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `end`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscription_end(
                    thisPtr,

                    )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `next`() : FfiEnvelope {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscription_next(
                    thisPtr,

                    )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiEnvelope.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `update`(`req`: FfiV2SubscribeRequest) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscription_update(
                    thisPtr,
                    FfiConverterTypeFfiV2SubscribeRequest.lower(`req`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }



    companion object

}

public object FfiConverterTypeFfiV2Subscription: FfiConverter<FfiV2Subscription, Pointer> {

    override fun lower(value: FfiV2Subscription): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiV2Subscription {
        return FfiV2Subscription(value)
    }

    override fun read(buf: ByteBuffer): FfiV2Subscription {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiV2Subscription) = 8

    override fun write(value: FfiV2Subscription, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//



public interface FfiXmtpClientInterface {

    fun `accountAddress`(): String

    suspend fun `canMessage`(`accountAddresses`: List<String>): List<Boolean>

    fun `conversations`(): FfiConversations

    suspend fun `registerIdentity`(`recoverableWalletSignature`: ByteArray?)

    fun `textToSign`(): String?

    companion object
}

open class FfiXmtpClient: Disposable, AutoCloseable, FfiXmtpClientInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffixmtpclient(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffixmtpclient(pointer!!, status)
        }
    }

    override fun `accountAddress`(): String =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_account_address(it,

                    _status)
            }
        }.let {
            FfiConverterString.lift(it)
        }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `canMessage`(`accountAddresses`: List<String>) : List<Boolean> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_can_message(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceBoolean.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }
    override fun `conversations`(): FfiConversations =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_conversations(it,

                    _status)
            }
        }.let {
            FfiConverterTypeFfiConversations.lift(it)
        }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `registerIdentity`(`recoverableWalletSignature`: ByteArray?) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_register_identity(
                    thisPtr,
                    FfiConverterOptionalByteArray.lower(`recoverableWalletSignature`),
                )
            },
            { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(future, callback, continuation) },
            { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(future, continuation) },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }
    override fun `textToSign`(): String? =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_text_to_sign(it,

                    _status)
            }
        }.let {
            FfiConverterOptionalString.lift(it)
        }




    companion object

}

public object FfiConverterTypeFfiXmtpClient: FfiConverter<FfiXmtpClient, Pointer> {

    override fun lower(value: FfiXmtpClient): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiXmtpClient {
        return FfiXmtpClient(value)
    }

    override fun read(buf: ByteBuffer): FfiXmtpClient {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiXmtpClient) = 8

    override fun write(value: FfiXmtpClient, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class FfiCursor (
    var `digest`: ByteArray,
    var `senderTimeNs`: ULong
) {

    companion object
}

public object FfiConverterTypeFfiCursor: FfiConverterRustBuffer<FfiCursor> {
    override fun read(buf: ByteBuffer): FfiCursor {
        return FfiCursor(
            FfiConverterByteArray.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: FfiCursor) = (
            FfiConverterByteArray.allocationSize(value.`digest`) +
                    FfiConverterULong.allocationSize(value.`senderTimeNs`)
            )

    override fun write(value: FfiCursor, buf: ByteBuffer) {
        FfiConverterByteArray.write(value.`digest`, buf)
        FfiConverterULong.write(value.`senderTimeNs`, buf)
    }
}



data class FfiEnvelope (
    var `contentTopic`: String,
    var `timestampNs`: ULong,
    var `message`: ByteArray
) {

    companion object
}

public object FfiConverterTypeFfiEnvelope: FfiConverterRustBuffer<FfiEnvelope> {
    override fun read(buf: ByteBuffer): FfiEnvelope {
        return FfiEnvelope(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: FfiEnvelope) = (
            FfiConverterString.allocationSize(value.`contentTopic`) +
                    FfiConverterULong.allocationSize(value.`timestampNs`) +
                    FfiConverterByteArray.allocationSize(value.`message`)
            )

    override fun write(value: FfiEnvelope, buf: ByteBuffer) {
        FfiConverterString.write(value.`contentTopic`, buf)
        FfiConverterULong.write(value.`timestampNs`, buf)
        FfiConverterByteArray.write(value.`message`, buf)
    }
}



data class FfiGroupMember (
    var `accountAddress`: String,
    var `installationIds`: List<ByteArray>
) {

    companion object
}

public object FfiConverterTypeFfiGroupMember: FfiConverterRustBuffer<FfiGroupMember> {
    override fun read(buf: ByteBuffer): FfiGroupMember {
        return FfiGroupMember(
            FfiConverterString.read(buf),
            FfiConverterSequenceByteArray.read(buf),
        )
    }

    override fun allocationSize(value: FfiGroupMember) = (
            FfiConverterString.allocationSize(value.`accountAddress`) +
                    FfiConverterSequenceByteArray.allocationSize(value.`installationIds`)
            )

    override fun write(value: FfiGroupMember, buf: ByteBuffer) {
        FfiConverterString.write(value.`accountAddress`, buf)
        FfiConverterSequenceByteArray.write(value.`installationIds`, buf)
    }
}



data class FfiListConversationsOptions (
    var `createdAfterNs`: Long?,
    var `createdBeforeNs`: Long?,
    var `limit`: Long?
) {

    companion object
}

public object FfiConverterTypeFfiListConversationsOptions: FfiConverterRustBuffer<FfiListConversationsOptions> {
    override fun read(buf: ByteBuffer): FfiListConversationsOptions {
        return FfiListConversationsOptions(
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
        )
    }

    override fun allocationSize(value: FfiListConversationsOptions) = (
            FfiConverterOptionalLong.allocationSize(value.`createdAfterNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`createdBeforeNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`limit`)
            )

    override fun write(value: FfiListConversationsOptions, buf: ByteBuffer) {
        FfiConverterOptionalLong.write(value.`createdAfterNs`, buf)
        FfiConverterOptionalLong.write(value.`createdBeforeNs`, buf)
        FfiConverterOptionalLong.write(value.`limit`, buf)
    }
}



data class FfiListMessagesOptions (
    var `sentBeforeNs`: Long?,
    var `sentAfterNs`: Long?,
    var `limit`: Long?
) {

    companion object
}

public object FfiConverterTypeFfiListMessagesOptions: FfiConverterRustBuffer<FfiListMessagesOptions> {
    override fun read(buf: ByteBuffer): FfiListMessagesOptions {
        return FfiListMessagesOptions(
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
        )
    }

    override fun allocationSize(value: FfiListMessagesOptions) = (
            FfiConverterOptionalLong.allocationSize(value.`sentBeforeNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`sentAfterNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`limit`)
            )

    override fun write(value: FfiListMessagesOptions, buf: ByteBuffer) {
        FfiConverterOptionalLong.write(value.`sentBeforeNs`, buf)
        FfiConverterOptionalLong.write(value.`sentAfterNs`, buf)
        FfiConverterOptionalLong.write(value.`limit`, buf)
    }
}



data class FfiMessage (
    var `id`: ByteArray,
    var `sentAtNs`: Long,
    var `convoId`: ByteArray,
    var `addrFrom`: String,
    var `content`: ByteArray
) {

    companion object
}

public object FfiConverterTypeFfiMessage: FfiConverterRustBuffer<FfiMessage> {
    override fun read(buf: ByteBuffer): FfiMessage {
        return FfiMessage(
            FfiConverterByteArray.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: FfiMessage) = (
            FfiConverterByteArray.allocationSize(value.`id`) +
                    FfiConverterLong.allocationSize(value.`sentAtNs`) +
                    FfiConverterByteArray.allocationSize(value.`convoId`) +
                    FfiConverterString.allocationSize(value.`addrFrom`) +
                    FfiConverterByteArray.allocationSize(value.`content`)
            )

    override fun write(value: FfiMessage, buf: ByteBuffer) {
        FfiConverterByteArray.write(value.`id`, buf)
        FfiConverterLong.write(value.`sentAtNs`, buf)
        FfiConverterByteArray.write(value.`convoId`, buf)
        FfiConverterString.write(value.`addrFrom`, buf)
        FfiConverterByteArray.write(value.`content`, buf)
    }
}



data class FfiPagingInfo (
    var `limit`: UInt,
    var `cursor`: FfiCursor?,
    var `direction`: FfiSortDirection
) {

    companion object
}

public object FfiConverterTypeFfiPagingInfo: FfiConverterRustBuffer<FfiPagingInfo> {
    override fun read(buf: ByteBuffer): FfiPagingInfo {
        return FfiPagingInfo(
            FfiConverterUInt.read(buf),
            FfiConverterOptionalTypeFfiCursor.read(buf),
            FfiConverterTypeFfiSortDirection.read(buf),
        )
    }

    override fun allocationSize(value: FfiPagingInfo) = (
            FfiConverterUInt.allocationSize(value.`limit`) +
                    FfiConverterOptionalTypeFfiCursor.allocationSize(value.`cursor`) +
                    FfiConverterTypeFfiSortDirection.allocationSize(value.`direction`)
            )

    override fun write(value: FfiPagingInfo, buf: ByteBuffer) {
        FfiConverterUInt.write(value.`limit`, buf)
        FfiConverterOptionalTypeFfiCursor.write(value.`cursor`, buf)
        FfiConverterTypeFfiSortDirection.write(value.`direction`, buf)
    }
}



data class FfiPublishRequest (
    var `envelopes`: List<FfiEnvelope>
) {

    companion object
}

public object FfiConverterTypeFfiPublishRequest: FfiConverterRustBuffer<FfiPublishRequest> {
    override fun read(buf: ByteBuffer): FfiPublishRequest {
        return FfiPublishRequest(
            FfiConverterSequenceTypeFfiEnvelope.read(buf),
        )
    }

    override fun allocationSize(value: FfiPublishRequest) = (
            FfiConverterSequenceTypeFfiEnvelope.allocationSize(value.`envelopes`)
            )

    override fun write(value: FfiPublishRequest, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiEnvelope.write(value.`envelopes`, buf)
    }
}



data class FfiV2BatchQueryRequest (
    var `requests`: List<FfiV2QueryRequest>
) {

    companion object
}

public object FfiConverterTypeFfiV2BatchQueryRequest: FfiConverterRustBuffer<FfiV2BatchQueryRequest> {
    override fun read(buf: ByteBuffer): FfiV2BatchQueryRequest {
        return FfiV2BatchQueryRequest(
            FfiConverterSequenceTypeFfiV2QueryRequest.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2BatchQueryRequest) = (
            FfiConverterSequenceTypeFfiV2QueryRequest.allocationSize(value.`requests`)
            )

    override fun write(value: FfiV2BatchQueryRequest, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiV2QueryRequest.write(value.`requests`, buf)
    }
}



data class FfiV2BatchQueryResponse (
    var `responses`: List<FfiV2QueryResponse>
) {

    companion object
}

public object FfiConverterTypeFfiV2BatchQueryResponse: FfiConverterRustBuffer<FfiV2BatchQueryResponse> {
    override fun read(buf: ByteBuffer): FfiV2BatchQueryResponse {
        return FfiV2BatchQueryResponse(
            FfiConverterSequenceTypeFfiV2QueryResponse.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2BatchQueryResponse) = (
            FfiConverterSequenceTypeFfiV2QueryResponse.allocationSize(value.`responses`)
            )

    override fun write(value: FfiV2BatchQueryResponse, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiV2QueryResponse.write(value.`responses`, buf)
    }
}



data class FfiV2QueryRequest (
    var `contentTopics`: List<String>,
    var `startTimeNs`: ULong,
    var `endTimeNs`: ULong,
    var `pagingInfo`: FfiPagingInfo?
) {

    companion object
}

public object FfiConverterTypeFfiV2QueryRequest: FfiConverterRustBuffer<FfiV2QueryRequest> {
    override fun read(buf: ByteBuffer): FfiV2QueryRequest {
        return FfiV2QueryRequest(
            FfiConverterSequenceString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalTypeFfiPagingInfo.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2QueryRequest) = (
            FfiConverterSequenceString.allocationSize(value.`contentTopics`) +
                    FfiConverterULong.allocationSize(value.`startTimeNs`) +
                    FfiConverterULong.allocationSize(value.`endTimeNs`) +
                    FfiConverterOptionalTypeFfiPagingInfo.allocationSize(value.`pagingInfo`)
            )

    override fun write(value: FfiV2QueryRequest, buf: ByteBuffer) {
        FfiConverterSequenceString.write(value.`contentTopics`, buf)
        FfiConverterULong.write(value.`startTimeNs`, buf)
        FfiConverterULong.write(value.`endTimeNs`, buf)
        FfiConverterOptionalTypeFfiPagingInfo.write(value.`pagingInfo`, buf)
    }
}



data class FfiV2QueryResponse (
    var `envelopes`: List<FfiEnvelope>,
    var `pagingInfo`: FfiPagingInfo?
) {

    companion object
}

public object FfiConverterTypeFfiV2QueryResponse: FfiConverterRustBuffer<FfiV2QueryResponse> {
    override fun read(buf: ByteBuffer): FfiV2QueryResponse {
        return FfiV2QueryResponse(
            FfiConverterSequenceTypeFfiEnvelope.read(buf),
            FfiConverterOptionalTypeFfiPagingInfo.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2QueryResponse) = (
            FfiConverterSequenceTypeFfiEnvelope.allocationSize(value.`envelopes`) +
                    FfiConverterOptionalTypeFfiPagingInfo.allocationSize(value.`pagingInfo`)
            )

    override fun write(value: FfiV2QueryResponse, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiEnvelope.write(value.`envelopes`, buf)
        FfiConverterOptionalTypeFfiPagingInfo.write(value.`pagingInfo`, buf)
    }
}



data class FfiV2SubscribeRequest (
    var `contentTopics`: List<String>
) {

    companion object
}

public object FfiConverterTypeFfiV2SubscribeRequest: FfiConverterRustBuffer<FfiV2SubscribeRequest> {
    override fun read(buf: ByteBuffer): FfiV2SubscribeRequest {
        return FfiV2SubscribeRequest(
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2SubscribeRequest) = (
            FfiConverterSequenceString.allocationSize(value.`contentTopics`)
            )

    override fun write(value: FfiV2SubscribeRequest, buf: ByteBuffer) {
        FfiConverterSequenceString.write(value.`contentTopics`, buf)
    }
}



enum class FfiSortDirection {

    UNSPECIFIED,
    ASCENDING,
    DESCENDING;
    companion object
}

public object FfiConverterTypeFfiSortDirection: FfiConverterRustBuffer<FfiSortDirection> {
    override fun read(buf: ByteBuffer) = try {
        FfiSortDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiSortDirection) = 4

    override fun write(value: FfiSortDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class GenericException(message: String): Exception(message) {

    class Client(message: String) : GenericException(message)

    class ClientBuilder(message: String) : GenericException(message)

    class Storage(message: String) : GenericException(message)

    class ApiException(message: String) : GenericException(message)

    class GroupException(message: String) : GenericException(message)

    class Signature(message: String) : GenericException(message)

    class Generic(message: String) : GenericException(message)


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<GenericException> {
        override fun lift(error_buf: RustBuffer.ByValue): GenericException = FfiConverterTypeGenericError.lift(error_buf)
    }
}

public object FfiConverterTypeGenericError : FfiConverterRustBuffer<GenericException> {
    override fun read(buf: ByteBuffer): GenericException {

        return when(buf.getInt()) {
            1 -> GenericException.Client(FfiConverterString.read(buf))
            2 -> GenericException.ClientBuilder(FfiConverterString.read(buf))
            3 -> GenericException.Storage(FfiConverterString.read(buf))
            4 -> GenericException.ApiException(FfiConverterString.read(buf))
            5 -> GenericException.GroupException(FfiConverterString.read(buf))
            6 -> GenericException.Signature(FfiConverterString.read(buf))
            7 -> GenericException.Generic(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    }

    override fun allocationSize(value: GenericException): Int {
        return 4
    }

    override fun write(value: GenericException, buf: ByteBuffer) {
        when(value) {
            is GenericException.Client -> {
                buf.putInt(1)
                Unit
            }
            is GenericException.ClientBuilder -> {
                buf.putInt(2)
                Unit
            }
            is GenericException.Storage -> {
                buf.putInt(3)
                Unit
            }
            is GenericException.ApiException -> {
                buf.putInt(4)
                Unit
            }
            is GenericException.GroupException -> {
                buf.putInt(5)
                Unit
            }
            is GenericException.Signature -> {
                buf.putInt(6)
                Unit
            }
            is GenericException.Generic -> {
                buf.putInt(7)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}



/**
 * XMTP SDK's may embed libxmtp (v3) alongside existing v2 protocol logic
 * for backwards-compatibility purposes. In this case, the client may already
 * have a wallet-signed v2 key. Depending on the source of this key,
 * libxmtp may choose to bootstrap v3 installation keys using the existing
 * legacy key.
 */
enum class LegacyIdentitySource {

    NONE,
    STATIC,
    NETWORK,
    KEY_GENERATOR;
    companion object
}

public object FfiConverterTypeLegacyIdentitySource: FfiConverterRustBuffer<LegacyIdentitySource> {
    override fun read(buf: ByteBuffer) = try {
        LegacyIdentitySource.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: LegacyIdentitySource) = 4

    override fun write(value: LegacyIdentitySource, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class SigningException(message: String): Exception(message) {

    class Generic(message: String) : SigningException(message)


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SigningException> {
        override fun lift(error_buf: RustBuffer.ByValue): SigningException = FfiConverterTypeSigningError.lift(error_buf)
    }
}

public object FfiConverterTypeSigningError : FfiConverterRustBuffer<SigningException> {
    override fun read(buf: ByteBuffer): SigningException {

        return when(buf.getInt()) {
            1 -> SigningException.Generic(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    }

    override fun allocationSize(value: SigningException): Int {
        return 4
    }

    override fun write(value: SigningException, buf: ByteBuffer) {
        when(value) {
            is SigningException.Generic -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}





public interface FfiInboxOwner {

    fun `getAddress`(): String

    fun `sign`(`text`: String): ByteArray

    companion object
}



internal typealias UniffiHandle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<UniffiHandle, T> = mutableMapOf(),
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): UniffiHandle =
        lock.withLock {
            currentHandle.getAndAdd(stride)
                .also { handle ->
                    leftMap[handle] = obj
                }
        }

    fun get(handle: UniffiHandle) = lock.withLock {
        leftMap[handle] ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    fun delete(handle: UniffiHandle) {
        this.remove(handle)
    }

    fun remove(handle: UniffiHandle): T? =
        lock.withLock {
            leftMap.remove(handle)
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>: FfiConverter<CallbackInterface, UniffiHandle> {
    internal val handleMap = ConcurrentHandleMap<CallbackInterface>()

    internal fun drop(handle: UniffiHandle) {
        handleMap.remove(handle)
    }

    override fun lift(value: UniffiHandle): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Implement the foreign callback handler for FfiInboxOwner
internal class UniffiCallbackInterfaceFfiInboxOwner : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeFfiInboxOwner.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeFfiInboxOwner.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeGetAddress`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeSign`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }

            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }


    @Suppress("UNUSED_PARAMETER")
    private fun `invokeGetAddress`(kotlinCallbackInterface: FfiInboxOwner, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`getAddress`(
            )
            outBuf.setValue(FfiConverterString.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }

    @Suppress("UNUSED_PARAMETER")
    private fun `invokeSign`(kotlinCallbackInterface: FfiInboxOwner, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`sign`(
                FfiConverterString.read(argsBuf)

            )
            outBuf.setValue(FfiConverterByteArray.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: SigningException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeSigningError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }


    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_ffiinboxowner(this)
    }
}

internal val uniffiCallbackInterfaceFfiInboxOwner = UniffiCallbackInterfaceFfiInboxOwner()

// The ffiConverter which transforms the Callbacks in to UniffiHandles to pass to Rust.
public object FfiConverterTypeFfiInboxOwner: FfiConverterCallbackInterface<FfiInboxOwner>()





public interface FfiLogger {

    fun `log`(`level`: UInt, `levelLabel`: String, `message`: String)

    companion object
}



// Implement the foreign callback handler for FfiLogger
internal class UniffiCallbackInterfaceFfiLogger : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeFfiLogger.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeFfiLogger.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeLog`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }

            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }


    @Suppress("UNUSED_PARAMETER")
    private fun `invokeLog`(kotlinCallbackInterface: FfiLogger, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`log`(
                FfiConverterUInt.read(argsBuf),
                FfiConverterString.read(argsBuf),
                FfiConverterString.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }


    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_ffilogger(this)
    }
}

internal val uniffiCallbackInterfaceFfiLogger = UniffiCallbackInterfaceFfiLogger()

// The ffiConverter which transforms the Callbacks in to UniffiHandles to pass to Rust.
public object FfiConverterTypeFfiLogger: FfiConverterCallbackInterface<FfiLogger>()





public interface FfiMessageCallback {

    fun `onMessage`(`message`: FfiMessage)

    companion object
}



// Implement the foreign callback handler for FfiMessageCallback
internal class UniffiCallbackInterfaceFfiMessageCallback : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeFfiMessageCallback.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeFfiMessageCallback.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeOnMessage`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }

            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }


    @Suppress("UNUSED_PARAMETER")
    private fun `invokeOnMessage`(kotlinCallbackInterface: FfiMessageCallback, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`onMessage`(
                FfiConverterTypeFfiMessage.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError() : Int = makeCall()

        return makeCallAndHandleError()
    }


    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_ffimessagecallback(this)
    }
}

internal val uniffiCallbackInterfaceFfiMessageCallback = UniffiCallbackInterfaceFfiMessageCallback()

// The ffiConverter which transforms the Callbacks in to UniffiHandles to pass to Rust.
public object FfiConverterTypeFfiMessageCallback: FfiConverterCallbackInterface<FfiMessageCallback>()




public object FfiConverterOptionalLong: FfiConverterRustBuffer<Long?> {
    override fun read(buf: ByteBuffer): Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: Long?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalByteArray: FfiConverterRustBuffer<ByteArray?> {
    override fun read(buf: ByteBuffer): ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: ByteArray?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFfiCursor: FfiConverterRustBuffer<FfiCursor?> {
    override fun read(buf: ByteBuffer): FfiCursor? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiCursor.read(buf)
    }

    override fun allocationSize(value: FfiCursor?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFfiCursor.allocationSize(value)
        }
    }

    override fun write(value: FfiCursor?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiCursor.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeFfiPagingInfo: FfiConverterRustBuffer<FfiPagingInfo?> {
    override fun read(buf: ByteBuffer): FfiPagingInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiPagingInfo.read(buf)
    }

    override fun allocationSize(value: FfiPagingInfo?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeFfiPagingInfo.allocationSize(value)
        }
    }

    override fun write(value: FfiPagingInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiPagingInfo.write(value, buf)
        }
    }
}




public object FfiConverterSequenceBoolean: FfiConverterRustBuffer<List<Boolean>> {
    override fun read(buf: ByteBuffer): List<Boolean> {
        val len = buf.getInt()
        return List<Boolean>(len) {
            FfiConverterBoolean.read(buf)
        }
    }

    override fun allocationSize(value: List<Boolean>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterBoolean.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Boolean>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterBoolean.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceByteArray: FfiConverterRustBuffer<List<ByteArray>> {
    override fun read(buf: ByteBuffer): List<ByteArray> {
        val len = buf.getInt()
        return List<ByteArray>(len) {
            FfiConverterByteArray.read(buf)
        }
    }

    override fun allocationSize(value: List<ByteArray>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterByteArray.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ByteArray>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterByteArray.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiGroup: FfiConverterRustBuffer<List<FfiGroup>> {
    override fun read(buf: ByteBuffer): List<FfiGroup> {
        val len = buf.getInt()
        return List<FfiGroup>(len) {
            FfiConverterTypeFfiGroup.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiGroup>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiGroup.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiGroup>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiGroup.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiEnvelope: FfiConverterRustBuffer<List<FfiEnvelope>> {
    override fun read(buf: ByteBuffer): List<FfiEnvelope> {
        val len = buf.getInt()
        return List<FfiEnvelope>(len) {
            FfiConverterTypeFfiEnvelope.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiEnvelope>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiEnvelope.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiEnvelope>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiEnvelope.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiGroupMember: FfiConverterRustBuffer<List<FfiGroupMember>> {
    override fun read(buf: ByteBuffer): List<FfiGroupMember> {
        val len = buf.getInt()
        return List<FfiGroupMember>(len) {
            FfiConverterTypeFfiGroupMember.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiGroupMember>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiGroupMember.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiGroupMember>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiGroupMember.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiMessage: FfiConverterRustBuffer<List<FfiMessage>> {
    override fun read(buf: ByteBuffer): List<FfiMessage> {
        val len = buf.getInt()
        return List<FfiMessage>(len) {
            FfiConverterTypeFfiMessage.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiMessage>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiMessage.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiMessage>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiMessage.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiV2QueryRequest: FfiConverterRustBuffer<List<FfiV2QueryRequest>> {
    override fun read(buf: ByteBuffer): List<FfiV2QueryRequest> {
        val len = buf.getInt()
        return List<FfiV2QueryRequest>(len) {
            FfiConverterTypeFfiV2QueryRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiV2QueryRequest>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiV2QueryRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiV2QueryRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiV2QueryRequest.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeFfiV2QueryResponse: FfiConverterRustBuffer<List<FfiV2QueryResponse>> {
    override fun read(buf: ByteBuffer): List<FfiV2QueryResponse> {
        val len = buf.getInt()
        return List<FfiV2QueryResponse>(len) {
            FfiConverterTypeFfiV2QueryResponse.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiV2QueryResponse>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeFfiV2QueryResponse.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiV2QueryResponse>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiV2QueryResponse.write(it, buf)
        }
    }
}




@Throws(GenericException::class)

@Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
suspend fun `createClient`(`logger`: FfiLogger, `host`: String, `isSecure`: Boolean, `db`: String?, `encryptionKey`: ByteArray?, `accountAddress`: String, `legacyIdentitySource`: LegacyIdentitySource, `legacySignedPrivateKeyProto`: ByteArray?) : FfiXmtpClient {
    return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_create_client(FfiConverterTypeFfiLogger.lower(`logger`),FfiConverterString.lower(`host`),FfiConverterBoolean.lower(`isSecure`),FfiConverterOptionalString.lower(`db`),FfiConverterOptionalByteArray.lower(`encryptionKey`),FfiConverterString.lower(`accountAddress`),FfiConverterTypeLegacyIdentitySource.lower(`legacyIdentitySource`),FfiConverterOptionalByteArray.lower(`legacySignedPrivateKeyProto`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeFfiXmtpClient.lift(it) },
        // Error FFI converter
        GenericException.ErrorHandler,
    )
}
@Throws(GenericException::class)

@Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
suspend fun `createV2Client`(`host`: String, `isSecure`: Boolean) : FfiV2ApiClient {
    return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_create_v2_client(FfiConverterString.lower(`host`),FfiConverterBoolean.lower(`isSecure`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeFfiV2ApiClient.lift(it) },
        // Error FFI converter
        GenericException.ErrorHandler,
    )
}
@Throws(GenericException::class)

fun `diffieHellmanK256`(`privateKeyBytes`: ByteArray, `publicKeyBytes`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_diffie_hellman_k256(FfiConverterByteArray.lower(`privateKeyBytes`),FfiConverterByteArray.lower(`publicKeyBytes`),_status)
        })
}

@Throws(GenericException::class)

fun `generatePrivatePreferencesTopicIdentifier`(`privateKey`: ByteArray): String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_generate_private_preferences_topic_identifier(FfiConverterByteArray.lower(`privateKey`),_status)
        })
}


fun `keccak256`(`input`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCall() { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_keccak256(FfiConverterByteArray.lower(`input`),_status)
        })
}

@Throws(GenericException::class)

fun `publicKeyFromPrivateKeyK256`(`privateKeyBytes`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_public_key_from_private_key_k256(FfiConverterByteArray.lower(`privateKeyBytes`),_status)
        })
}

@Throws(GenericException::class)

fun `recoverAddress`(`signatureBytes`: ByteArray, `predigestMessage`: String): String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_recover_address(FfiConverterByteArray.lower(`signatureBytes`),FfiConverterString.lower(`predigestMessage`),_status)
        })
}

@Throws(GenericException::class)

fun `recoverPublicKeyK256Keccak256`(`message`: ByteArray, `signature`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_recover_public_key_k256_keccak256(FfiConverterByteArray.lower(`message`),FfiConverterByteArray.lower(`signature`),_status)
        })
}

@Throws(GenericException::class)

fun `recoverPublicKeyK256Sha256`(`message`: ByteArray, `signature`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_recover_public_key_k256_sha256(FfiConverterByteArray.lower(`message`),FfiConverterByteArray.lower(`signature`),_status)
        })
}


fun `sha256`(`input`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCall() { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_sha256(FfiConverterByteArray.lower(`input`),_status)
        })
}

@Throws(GenericException::class)

fun `userPreferencesDecrypt`(`publicKey`: ByteArray, `privateKey`: ByteArray, `message`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_user_preferences_decrypt(FfiConverterByteArray.lower(`publicKey`),FfiConverterByteArray.lower(`privateKey`),FfiConverterByteArray.lower(`message`),_status)
        })
}

@Throws(GenericException::class)

fun `userPreferencesEncrypt`(`publicKey`: ByteArray, `privateKey`: ByteArray, `message`: ByteArray): ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_user_preferences_encrypt(FfiConverterByteArray.lower(`publicKey`),FfiConverterByteArray.lower(`privateKey`),FfiConverterByteArray.lower(`message`),_status)
        })
}

@Throws(GenericException::class)

fun `verifyK256Sha256`(`signedBy`: ByteArray, `message`: ByteArray, `signature`: ByteArray, `recoveryId`: UByte): Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_verify_k256_sha256(FfiConverterByteArray.lower(`signedBy`),FfiConverterByteArray.lower(`message`),FfiConverterByteArray.lower(`signature`),FfiConverterUByte.lower(`recoveryId`),_status)
        })
}


