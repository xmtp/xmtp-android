// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.xmtpv3

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField
    var capacity: Long = 0

    @JvmField
    var len: Long = 0

    @JvmField
    var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_xmtpv3_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if (it.data == null) {
                throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
            }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField
    var len: Int = 0

    @JvmField
    var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField
    var code: Byte = 0

    @JvmField
    var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue : UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : kotlin.Exception> uniffiRustCallWithError(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    callback: (UniffiRustCallStatus) -> U,
): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun <E : kotlin.Exception> uniffiCheckCallStatus(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    status: UniffiRustCallStatus,
) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler : UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun <T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun <T, reified E : Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_xmtpv3"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String,
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long, `pollResult`: Byte)
}

internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ) : UniffiForeignFuture(`handle`, `free`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU8(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructU8.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI8(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructI8.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU16(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructU16.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI16(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructI16.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructU32.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructI32.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructU64.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructI64.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructF32.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructF64.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructPointer(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructPointer.UniffiByValue)
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructRustBuffer(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,
    )
}

@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructVoid(`callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}

internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long, `result`: UniffiForeignFutureStructVoid.UniffiByValue)
}

internal interface UniffiCallbackInterfaceFfiInboxOwnerMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `uniffiOutReturn`: RustBuffer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiInboxOwnerMethod1 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `text`: RustBuffer.ByValue,
        `uniffiOutReturn`: RustBuffer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiConsentCallbackMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `consent`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiConsentCallbackMethod1 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `error`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiConversationCallbackMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `conversation`: Pointer,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiConversationCallbackMethod1 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `error`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiMessageCallbackMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `message`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiMessageCallbackMethod1 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `error`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiPreferenceCallbackMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `preference`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiPreferenceCallbackMethod1 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `error`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `message`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

internal interface UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod1 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `error`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

@Structure.FieldOrder("getAddress", "sign", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceFfiInboxOwner(
    @JvmField internal var `getAddress`: UniffiCallbackInterfaceFfiInboxOwnerMethod0? = null,
    @JvmField internal var `sign`: UniffiCallbackInterfaceFfiInboxOwnerMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `getAddress`: UniffiCallbackInterfaceFfiInboxOwnerMethod0? = null,
        `sign`: UniffiCallbackInterfaceFfiInboxOwnerMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceFfiInboxOwner(`getAddress`, `sign`, `uniffiFree`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceFfiInboxOwner) {
        `getAddress` = other.`getAddress`
        `sign` = other.`sign`
        `uniffiFree` = other.`uniffiFree`
    }

}

@Structure.FieldOrder("onConsentUpdate", "onError", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceFfiConsentCallback(
    @JvmField internal var `onConsentUpdate`: UniffiCallbackInterfaceFfiConsentCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceFfiConsentCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onConsentUpdate`: UniffiCallbackInterfaceFfiConsentCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceFfiConsentCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceFfiConsentCallback(
        `onConsentUpdate`,
        `onError`,
        `uniffiFree`,
    ), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceFfiConsentCallback) {
        `onConsentUpdate` = other.`onConsentUpdate`
        `onError` = other.`onError`
        `uniffiFree` = other.`uniffiFree`
    }

}

@Structure.FieldOrder("onConversation", "onError", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceFfiConversationCallback(
    @JvmField internal var `onConversation`: UniffiCallbackInterfaceFfiConversationCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceFfiConversationCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onConversation`: UniffiCallbackInterfaceFfiConversationCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceFfiConversationCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceFfiConversationCallback(
        `onConversation`,
        `onError`,
        `uniffiFree`,
    ), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceFfiConversationCallback) {
        `onConversation` = other.`onConversation`
        `onError` = other.`onError`
        `uniffiFree` = other.`uniffiFree`
    }

}

@Structure.FieldOrder("onMessage", "onError", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceFfiMessageCallback(
    @JvmField internal var `onMessage`: UniffiCallbackInterfaceFfiMessageCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceFfiMessageCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onMessage`: UniffiCallbackInterfaceFfiMessageCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceFfiMessageCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceFfiMessageCallback(`onMessage`, `onError`, `uniffiFree`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceFfiMessageCallback) {
        `onMessage` = other.`onMessage`
        `onError` = other.`onError`
        `uniffiFree` = other.`uniffiFree`
    }

}

@Structure.FieldOrder("onPreferenceUpdate", "onError", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceFfiPreferenceCallback(
    @JvmField internal var `onPreferenceUpdate`: UniffiCallbackInterfaceFfiPreferenceCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceFfiPreferenceCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onPreferenceUpdate`: UniffiCallbackInterfaceFfiPreferenceCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceFfiPreferenceCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceFfiPreferenceCallback(
        `onPreferenceUpdate`,
        `onError`,
        `uniffiFree`,
    ), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceFfiPreferenceCallback) {
        `onPreferenceUpdate` = other.`onPreferenceUpdate`
        `onError` = other.`onError`
        `uniffiFree` = other.`uniffiFree`
    }

}

@Structure.FieldOrder("onMessage", "onError", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceFfiV2SubscriptionCallback(
    @JvmField internal var `onMessage`: UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod1? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onMessage`: UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod1? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceFfiV2SubscriptionCallback(
        `onMessage`,
        `onError`,
        `uniffiFree`,
    ), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceFfiV2SubscriptionCallback) {
        `onMessage` = other.`onMessage`
        `onError` = other.`onError`
        `uniffiFree` = other.`uniffiFree`
    }

}


// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "xmtpv3")
                .also { lib: UniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                    uniffiCallbackInterfaceFfiConsentCallback.register(lib)
                    uniffiCallbackInterfaceFfiConversationCallback.register(lib)
                    uniffiCallbackInterfaceFfiMessageCallback.register(lib)
                    uniffiCallbackInterfaceFfiPreferenceCallback.register(lib)
                    uniffiCallbackInterfaceFfiV2SubscriptionCallback.register(lib)
                    uniffiCallbackInterfaceFfiInboxOwner.register(lib)
                }
        }

        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_xmtpv3_fn_clone_fficonsentcallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_fficonsentcallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_init_callback_vtable_fficonsentcallback(
        `vtable`: UniffiVTableCallbackInterfaceFfiConsentCallback,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonsentcallback_on_consent_update(
        `ptr`: Pointer, `consent`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonsentcallback_on_error(
        `ptr`: Pointer, `error`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_clone_fficonversation(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_fficonversation(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonversation_add_admin(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_add_members(
        `ptr`: Pointer, `accountAddresses`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_add_members_by_inbox_id(
        `ptr`: Pointer, `inboxIds`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_add_super_admin(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_added_by_inbox_id(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_admin_list(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_consent_state(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_conversation_type(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_created_at_ns(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_dm_peer_inbox_id(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_find_messages(
        `ptr`: Pointer, `opts`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_group_description(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_group_image_url_square(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_group_metadata(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_method_fficonversation_group_name(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_group_permissions(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_method_fficonversation_group_pinned_frame_url(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_id(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_is_active(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_xmtpv3_fn_method_fficonversation_is_admin(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_xmtpv3_fn_method_fficonversation_is_super_admin(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_xmtpv3_fn_method_fficonversation_list_members(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_process_streamed_conversation_message(
        `ptr`: Pointer, `envelopeBytes`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_publish_messages(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_remove_admin(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_remove_members(
        `ptr`: Pointer, `accountAddresses`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_remove_members_by_inbox_id(
        `ptr`: Pointer, `inboxIds`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_remove_super_admin(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_send(
        `ptr`: Pointer, `contentBytes`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_send_optimistic(
        `ptr`: Pointer, `contentBytes`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_stream(
        `ptr`: Pointer, `messageCallback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_super_admin_list(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversation_sync(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_update_consent_state(
        `ptr`: Pointer, `state`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonversation_update_group_description(
        `ptr`: Pointer, `groupDescription`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_update_group_image_url_square(
        `ptr`: Pointer, `groupImageUrlSquare`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_update_group_name(
        `ptr`: Pointer, `groupName`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_update_group_pinned_frame_url(
        `ptr`: Pointer, `pinnedFrameUrl`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversation_update_permission_policy(
        `ptr`: Pointer,
        `permissionUpdateType`: RustBuffer.ByValue,
        `permissionPolicyOption`: RustBuffer.ByValue,
        `metadataField`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_clone_fficonversationcallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_fficonversationcallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_init_callback_vtable_fficonversationcallback(
        `vtable`: UniffiVTableCallbackInterfaceFfiConversationCallback,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonversationcallback_on_conversation(
        `ptr`: Pointer, `conversation`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonversationcallback_on_error(
        `ptr`: Pointer, `error`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_clone_fficonversationmetadata(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_fficonversationmetadata(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonversationmetadata_conversation_type(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_fficonversationmetadata_creator_inbox_id(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_clone_fficonversations(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_fficonversations(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_fficonversations_create_dm(
        `ptr`: Pointer, `accountAddress`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_create_group(
        `ptr`: Pointer, `accountAddresses`: RustBuffer.ByValue, `opts`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_get_sync_group(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_method_fficonversations_list(
        `ptr`: Pointer, `opts`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_list_dms(
        `ptr`: Pointer, `opts`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_list_groups(
        `ptr`: Pointer, `opts`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_process_streamed_welcome_message(
        `ptr`: Pointer, `envelopeBytes`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream(
        `ptr`: Pointer, `callback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_all_dm_messages(
        `ptr`: Pointer, `messageCallback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_all_group_messages(
        `ptr`: Pointer, `messageCallback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_all_messages(
        `ptr`: Pointer, `messageCallback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_consent(
        `ptr`: Pointer, `callback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_dms(
        `ptr`: Pointer, `callback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_groups(
        `ptr`: Pointer, `callback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_messages(
        `ptr`: Pointer, `messageCallback`: Pointer, `conversationType`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_stream_preferences(
        `ptr`: Pointer, `callback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_sync(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_fficonversations_sync_all_conversations(
        `ptr`: Pointer, `consentState`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_clone_ffigrouppermissions(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffigrouppermissions(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffigrouppermissions_policy_set(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffigrouppermissions_policy_type(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_clone_ffimessagecallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffimessagecallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_init_callback_vtable_ffimessagecallback(
        `vtable`: UniffiVTableCallbackInterfaceFfiMessageCallback,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffimessagecallback_on_message(
        `ptr`: Pointer, `message`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffimessagecallback_on_error(
        `ptr`: Pointer, `error`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_clone_ffipreferencecallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffipreferencecallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_init_callback_vtable_ffipreferencecallback(
        `vtable`: UniffiVTableCallbackInterfaceFfiPreferenceCallback,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffipreferencecallback_on_preference_update(
        `ptr`: Pointer, `preference`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffipreferencecallback_on_error(
        `ptr`: Pointer, `error`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_clone_ffisignaturerequest(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffisignaturerequest(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffisignaturerequest_add_ecdsa_signature(
        `ptr`: Pointer, `signatureBytes`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffisignaturerequest_add_scw_signature(
        `ptr`: Pointer,
        `signatureBytes`: RustBuffer.ByValue,
        `address`: RustBuffer.ByValue,
        `chainId`: Long,
        `blockNumber`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffisignaturerequest_is_ready(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffisignaturerequest_missing_address_signatures(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffisignaturerequest_signature_text(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_clone_ffistreamcloser(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffistreamcloser(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffistreamcloser_end(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffistreamcloser_end_and_wait(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffistreamcloser_is_closed(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_xmtpv3_fn_method_ffistreamcloser_wait_for_ready(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_clone_ffiv2apiclient(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffiv2apiclient(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_batch_query(
        `ptr`: Pointer, `req`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_publish(
        `ptr`: Pointer, `request`: RustBuffer.ByValue, `authToken`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_query(
        `ptr`: Pointer, `request`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_set_app_version(
        `ptr`: Pointer, `version`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffiv2apiclient_subscribe(
        `ptr`: Pointer, `request`: RustBuffer.ByValue, `callback`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_clone_ffiv2subscription(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffiv2subscription(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffiv2subscription_end(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffiv2subscription_is_closed(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_xmtpv3_fn_method_ffiv2subscription_update(
        `ptr`: Pointer, `req`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_clone_ffiv2subscriptioncallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffiv2subscriptioncallback(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_init_callback_vtable_ffiv2subscriptioncallback(
        `vtable`: UniffiVTableCallbackInterfaceFfiV2SubscriptionCallback,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffiv2subscriptioncallback_on_message(
        `ptr`: Pointer, `message`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffiv2subscriptioncallback_on_error(
        `ptr`: Pointer, `error`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_clone_ffixmtpclient(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_free_ffixmtpclient(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_add_wallet(
        `ptr`: Pointer, `newWalletAddress`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_addresses_from_inbox_id(
        `ptr`: Pointer, `refreshFromNetwork`: Byte, `inboxIds`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_apply_signature_request(
        `ptr`: Pointer, `signatureRequest`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_can_message(
        `ptr`: Pointer, `accountAddresses`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_conversation(
        `ptr`: Pointer, `conversationId`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_conversations(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_db_reconnect(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_dm_conversation(
        `ptr`: Pointer, `targetInboxId`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_find_inbox_id(
        `ptr`: Pointer, `address`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_get_consent_state(
        `ptr`: Pointer, `entityType`: RustBuffer.ByValue, `entity`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_get_hmac_keys(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_get_latest_inbox_state(
        `ptr`: Pointer, `inboxId`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_inbox_id(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_inbox_state(
        `ptr`: Pointer, `refreshFromNetwork`: Byte,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_installation_id(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_message(
        `ptr`: Pointer, `messageId`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_register_identity(
        `ptr`: Pointer, `signatureRequest`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_release_db_connection(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_revoke_all_other_installations(
        `ptr`: Pointer,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_revoke_wallet(
        `ptr`: Pointer, `walletAddress`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_send_sync_request(
        `ptr`: Pointer, `kind`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_set_consent_states(
        `ptr`: Pointer, `records`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_sign_with_installation_key(
        `ptr`: Pointer, `text`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_signature_request(
        `ptr`: Pointer, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_verify_signed_with_installation_key(
        `ptr`: Pointer,
        `signatureText`: RustBuffer.ByValue,
        `signatureBytes`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_method_ffixmtpclient_verify_signed_with_public_key(
        `ptr`: Pointer,
        `signatureText`: RustBuffer.ByValue,
        `signatureBytes`: RustBuffer.ByValue,
        `publicKey`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_fn_init_callback_vtable_ffiinboxowner(
        `vtable`: UniffiVTableCallbackInterfaceFfiInboxOwner,
    ): Unit

    fun uniffi_xmtpv3_fn_func_create_client(
        `host`: RustBuffer.ByValue,
        `isSecure`: Byte,
        `db`: RustBuffer.ByValue,
        `encryptionKey`: RustBuffer.ByValue,
        `inboxId`: RustBuffer.ByValue,
        `accountAddress`: RustBuffer.ByValue,
        `nonce`: Long,
        `legacySignedPrivateKeyProto`: RustBuffer.ByValue,
        `historySyncUrl`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_func_create_v2_client(
        `host`: RustBuffer.ByValue, `isSecure`: Byte,
    ): Long

    fun uniffi_xmtpv3_fn_func_diffie_hellman_k256(
        `privateKeyBytes`: RustBuffer.ByValue,
        `publicKeyBytes`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_generate_inbox_id(
        `accountAddress`: RustBuffer.ByValue, `nonce`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_generate_private_preferences_topic_identifier(
        `privateKey`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_get_inbox_id_for_address(
        `host`: RustBuffer.ByValue, `isSecure`: Byte, `accountAddress`: RustBuffer.ByValue,
    ): Long

    fun uniffi_xmtpv3_fn_func_get_version_info(
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_keccak256(
        `input`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_public_key_from_private_key_k256(
        `privateKeyBytes`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_recover_address(
        `signatureBytes`: RustBuffer.ByValue,
        `predigestMessage`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_recover_public_key_k256_keccak256(
        `message`: RustBuffer.ByValue,
        `signature`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_recover_public_key_k256_sha256(
        `message`: RustBuffer.ByValue,
        `signature`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_sha256(
        `input`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_user_preferences_decrypt(
        `publicKey`: RustBuffer.ByValue,
        `privateKey`: RustBuffer.ByValue,
        `message`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_user_preferences_encrypt(
        `publicKey`: RustBuffer.ByValue,
        `privateKey`: RustBuffer.ByValue,
        `message`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_xmtpv3_fn_func_verify_k256_sha256(
        `signedBy`: RustBuffer.ByValue,
        `message`: RustBuffer.ByValue,
        `signature`: RustBuffer.ByValue,
        `recoveryId`: Byte,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_xmtpv3_rustbuffer_alloc(
        `size`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_xmtpv3_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_xmtpv3_rustbuffer_free(
        `buf`: RustBuffer.ByValue, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_xmtpv3_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue, `additional`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_xmtpv3_rust_future_poll_u8(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_u8(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_u8(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_u8(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_xmtpv3_rust_future_poll_i8(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_i8(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_i8(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_i8(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_xmtpv3_rust_future_poll_u16(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_u16(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_u16(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_u16(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_xmtpv3_rust_future_poll_i16(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_i16(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_i16(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_i16(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_xmtpv3_rust_future_poll_u32(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_u32(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_u32(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_u32(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_xmtpv3_rust_future_poll_i32(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_i32(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_i32(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_i32(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_xmtpv3_rust_future_poll_u64(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_u64(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_u64(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_u64(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_xmtpv3_rust_future_poll_i64(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_i64(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_i64(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_i64(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_xmtpv3_rust_future_poll_f32(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_f32(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_f32(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_f32(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Float

    fun ffi_xmtpv3_rust_future_poll_f64(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_f64(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_f64(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_f64(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Double

    fun ffi_xmtpv3_rust_future_poll_pointer(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_pointer(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_pointer(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_pointer(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun ffi_xmtpv3_rust_future_poll_rust_buffer(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_rust_buffer(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_rust_buffer(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_rust_buffer(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_xmtpv3_rust_future_poll_void(
        `handle`: Long, `callback`: UniffiRustFutureContinuationCallback, `callbackData`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_cancel_void(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_free_void(
        `handle`: Long,
    ): Unit

    fun ffi_xmtpv3_rust_future_complete_void(
        `handle`: Long, uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_xmtpv3_checksum_func_create_client(
    ): Short

    fun uniffi_xmtpv3_checksum_func_create_v2_client(
    ): Short

    fun uniffi_xmtpv3_checksum_func_diffie_hellman_k256(
    ): Short

    fun uniffi_xmtpv3_checksum_func_generate_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_func_generate_private_preferences_topic_identifier(
    ): Short

    fun uniffi_xmtpv3_checksum_func_get_inbox_id_for_address(
    ): Short

    fun uniffi_xmtpv3_checksum_func_get_version_info(
    ): Short

    fun uniffi_xmtpv3_checksum_func_keccak256(
    ): Short

    fun uniffi_xmtpv3_checksum_func_public_key_from_private_key_k256(
    ): Short

    fun uniffi_xmtpv3_checksum_func_recover_address(
    ): Short

    fun uniffi_xmtpv3_checksum_func_recover_public_key_k256_keccak256(
    ): Short

    fun uniffi_xmtpv3_checksum_func_recover_public_key_k256_sha256(
    ): Short

    fun uniffi_xmtpv3_checksum_func_sha256(
    ): Short

    fun uniffi_xmtpv3_checksum_func_user_preferences_decrypt(
    ): Short

    fun uniffi_xmtpv3_checksum_func_user_preferences_encrypt(
    ): Short

    fun uniffi_xmtpv3_checksum_func_verify_k256_sha256(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonsentcallback_on_consent_update(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonsentcallback_on_error(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_add_admin(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_add_members(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_add_members_by_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_add_super_admin(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_added_by_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_admin_list(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_consent_state(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_conversation_type(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_created_at_ns(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_dm_peer_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_find_messages(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_group_description(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_group_image_url_square(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_group_metadata(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_group_name(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_group_permissions(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_group_pinned_frame_url(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_is_active(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_is_admin(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_is_super_admin(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_list_members(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_process_streamed_conversation_message(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_publish_messages(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_remove_admin(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_remove_members(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_remove_members_by_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_remove_super_admin(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_send(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_send_optimistic(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_stream(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_super_admin_list(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_sync(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_update_consent_state(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_update_group_description(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_update_group_image_url_square(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_update_group_name(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_update_group_pinned_frame_url(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversation_update_permission_policy(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversationcallback_on_conversation(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversationcallback_on_error(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversationmetadata_conversation_type(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversationmetadata_creator_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_create_dm(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_create_group(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_get_sync_group(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_list(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_list_dms(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_list_groups(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_process_streamed_welcome_message(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_all_dm_messages(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_all_group_messages(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_all_messages(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_consent(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_dms(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_groups(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_messages(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_stream_preferences(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_sync(
    ): Short

    fun uniffi_xmtpv3_checksum_method_fficonversations_sync_all_conversations(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffigrouppermissions_policy_set(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffigrouppermissions_policy_type(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffimessagecallback_on_message(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffimessagecallback_on_error(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffipreferencecallback_on_preference_update(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffipreferencecallback_on_error(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffisignaturerequest_add_ecdsa_signature(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffisignaturerequest_add_scw_signature(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffisignaturerequest_is_ready(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffisignaturerequest_missing_address_signatures(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffisignaturerequest_signature_text(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffistreamcloser_end(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffistreamcloser_end_and_wait(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffistreamcloser_is_closed(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffistreamcloser_wait_for_ready(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_batch_query(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_publish(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_query(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_set_app_version(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2apiclient_subscribe(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2subscription_end(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2subscription_is_closed(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2subscription_update(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2subscriptioncallback_on_message(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiv2subscriptioncallback_on_error(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_add_wallet(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_addresses_from_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_apply_signature_request(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_can_message(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_conversation(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_conversations(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_db_reconnect(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_dm_conversation(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_find_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_get_consent_state(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_get_hmac_keys(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_get_latest_inbox_state(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_inbox_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_inbox_state(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_installation_id(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_message(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_register_identity(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_release_db_connection(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_revoke_all_other_installations(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_revoke_wallet(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_send_sync_request(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_set_consent_states(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_sign_with_installation_key(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_signature_request(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_verify_signed_with_installation_key(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffixmtpclient_verify_signed_with_public_key(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiinboxowner_get_address(
    ): Short

    fun uniffi_xmtpv3_checksum_method_ffiinboxowner_sign(
    ): Short

    fun ffi_xmtpv3_uniffi_contract_version(
    ): Int

}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_xmtpv3_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_xmtpv3_checksum_func_create_client() != 50509.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_create_v2_client() != 48060.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_diffie_hellman_k256() != 37475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_generate_inbox_id() != 47637.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_generate_private_preferences_topic_identifier() != 59124.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_get_inbox_id_for_address() != 35414.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_get_version_info() != 29277.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_keccak256() != 61901.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_public_key_from_private_key_k256() != 22921.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_recover_address() != 48606.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_recover_public_key_k256_keccak256() != 45215.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_recover_public_key_k256_sha256() != 42303.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_sha256() != 32492.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_user_preferences_decrypt() != 43766.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_user_preferences_encrypt() != 184.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_func_verify_k256_sha256() != 25521.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonsentcallback_on_consent_update() != 12532.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonsentcallback_on_error() != 5882.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_add_admin() != 52417.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_add_members() != 3260.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_add_members_by_inbox_id() != 28069.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_add_super_admin() != 62984.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_added_by_inbox_id() != 12748.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_admin_list() != 26668.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_consent_state() != 25033.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_conversation_type() != 16402.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_created_at_ns() != 17973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_dm_peer_inbox_id() != 59526.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_find_messages() != 58508.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_group_description() != 53570.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_group_image_url_square() != 3200.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_group_metadata() != 21111.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_group_name() != 9344.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_group_permissions() != 61947.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_group_pinned_frame_url() != 40964.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_id() != 5542.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_is_active() != 49581.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_is_admin() != 12325.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_is_super_admin() != 25811.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_list_members() != 21260.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_process_streamed_conversation_message() != 4359.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_publish_messages() != 15643.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_remove_admin() != 7973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_remove_members() != 49452.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_remove_members_by_inbox_id() != 53192.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_remove_super_admin() != 46017.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_send() != 7954.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_send_optimistic() != 5885.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_stream() != 26870.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_super_admin_list() != 50610.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_sync() != 17206.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_update_consent_state() != 27721.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_update_group_description() != 14549.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_update_group_image_url_square() != 36900.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_update_group_name() != 62600.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_update_group_pinned_frame_url() != 21997.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversation_update_permission_policy() != 3743.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversationcallback_on_conversation() != 25316.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversationcallback_on_error() != 461.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversationmetadata_conversation_type() != 22241.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversationmetadata_creator_inbox_id() != 61067.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_create_dm() != 63785.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_create_group() != 7282.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_get_sync_group() != 42973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_list() != 42790.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_list_dms() != 41576.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_list_groups() != 2386.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_process_streamed_welcome_message() != 57376.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream() != 31576.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_all_dm_messages() != 19666.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_all_group_messages() != 38852.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_all_messages() != 63519.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_consent() != 27123.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_dms() != 52710.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_groups() != 11064.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_messages() != 30183.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_stream_preferences() != 37452.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_sync() != 9054.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_fficonversations_sync_all_conversations() != 2613.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigrouppermissions_policy_set() != 24928.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffigrouppermissions_policy_type() != 56975.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffimessagecallback_on_message() != 5286.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffimessagecallback_on_error() != 32204.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffipreferencecallback_on_preference_update() != 19900.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffipreferencecallback_on_error() != 41454.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffisignaturerequest_add_ecdsa_signature() != 8706.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffisignaturerequest_add_scw_signature() != 52793.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffisignaturerequest_is_ready() != 65051.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffisignaturerequest_missing_address_signatures() != 34688.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffisignaturerequest_signature_text() != 60472.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffistreamcloser_end() != 11040.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffistreamcloser_end_and_wait() != 1181.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffistreamcloser_is_closed() != 62423.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffistreamcloser_wait_for_ready() != 38545.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_batch_query() != 26551.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_publish() != 3309.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_query() != 58821.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_set_app_version() != 28472.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2apiclient_subscribe() != 39124.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscription_end() != 38721.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscription_is_closed() != 4358.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscription_update() != 24211.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscriptioncallback_on_message() != 30049.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiv2subscriptioncallback_on_error() != 24930.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_add_wallet() != 24482.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_addresses_from_inbox_id() != 29264.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_apply_signature_request() != 32172.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_can_message() != 53502.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_conversation() != 60290.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_conversations() != 47463.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_db_reconnect() != 6707.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_dm_conversation() != 23917.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_find_inbox_id() != 59020.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_get_consent_state() != 58208.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_get_hmac_keys() != 36015.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_get_latest_inbox_state() != 3165.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_inbox_id() != 25128.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_inbox_state() != 7826.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_installation_id() != 37173.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_message() != 26932.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_register_identity() != 42003.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_release_db_connection() != 11067.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_revoke_all_other_installations() != 36450.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_revoke_wallet() != 12211.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_send_sync_request() != 41331.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_set_consent_states() != 64566.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_sign_with_installation_key() != 49813.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_signature_request() != 18270.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_verify_signed_with_installation_key() != 4340.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffixmtpclient_verify_signed_with_public_key() != 21532.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiinboxowner_get_address() != 2205.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_xmtpv3_checksum_method_ffiinboxowner_sign() != 30268.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl : UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun <T, F, E : kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()

    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/**
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer

/**
 * @suppress
 */
public object FfiConverterUByte : FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt : FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterULong : FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterLong : FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

/**
 * @suppress
 */
public object FfiConverterByteArray : FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }

    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }

    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

public interface FfiConsentCallback {

    fun `onConsentUpdate`(`consent`: List<FfiConsent>)

    fun `onError`(`error`: FfiSubscribeException)

    companion object
}

open class FfiConsentCallbackImpl : Disposable, AutoCloseable, FfiConsentCallback {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_fficonsentcallback(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_fficonsentcallback(pointer!!, status)
        }
    }

    override fun `onConsentUpdate`(`consent`: List<FfiConsent>) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonsentcallback_on_consent_update(
                    it, FfiConverterSequenceTypeFfiConsent.lower(`consent`), _status
                )
            }
        }


    override fun `onError`(`error`: FfiSubscribeException) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonsentcallback_on_error(
                    it, FfiConverterTypeFfiSubscribeError.lower(`error`), _status
                )
            }
        }


    companion object

}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface : Any> :
    FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceFfiConsentCallback {
    internal object `onConsentUpdate` : UniffiCallbackInterfaceFfiConsentCallbackMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `consent`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiConsentCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onConsentUpdate`(
                    FfiConverterSequenceTypeFfiConsent.lift(`consent`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object `onError` : UniffiCallbackInterfaceFfiConsentCallbackMethod1 {
        override fun callback(
            `uniffiHandle`: Long,
            `error`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiConsentCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterTypeFfiSubscribeError.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeFfiConsentCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceFfiConsentCallback.UniffiByValue(
        `onConsentUpdate`,
        `onError`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_vtable_fficonsentcallback(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConsentCallback : FfiConverter<FfiConsentCallback, Pointer> {
    internal val handleMap = UniffiHandleMap<FfiConsentCallback>()

    override fun lower(value: FfiConsentCallback): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): FfiConsentCallback {
        return FfiConsentCallbackImpl(value)
    }

    override fun read(buf: ByteBuffer): FfiConsentCallback {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiConsentCallback) = 8UL

    override fun write(value: FfiConsentCallback, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiConversationInterface {

    suspend fun `addAdmin`(`inboxId`: kotlin.String)

    suspend fun `addMembers`(`accountAddresses`: List<kotlin.String>)

    suspend fun `addMembersByInboxId`(`inboxIds`: List<kotlin.String>)

    suspend fun `addSuperAdmin`(`inboxId`: kotlin.String)

    fun `addedByInboxId`(): kotlin.String

    fun `adminList`(): List<kotlin.String>

    fun `consentState`(): FfiConsentState

    fun `conversationType`(): FfiConversationType

    fun `createdAtNs`(): kotlin.Long

    fun `dmPeerInboxId`(): kotlin.String

    fun `findMessages`(`opts`: FfiListMessagesOptions): List<FfiMessage>

    fun `groupDescription`(): kotlin.String

    fun `groupImageUrlSquare`(): kotlin.String

    fun `groupMetadata`(): FfiConversationMetadata

    fun `groupName`(): kotlin.String

    fun `groupPermissions`(): FfiGroupPermissions

    fun `groupPinnedFrameUrl`(): kotlin.String

    fun `id`(): kotlin.ByteArray

    fun `isActive`(): kotlin.Boolean

    fun `isAdmin`(`inboxId`: kotlin.String): kotlin.Boolean

    fun `isSuperAdmin`(`inboxId`: kotlin.String): kotlin.Boolean

    suspend fun `listMembers`(): List<FfiConversationMember>

    suspend fun `processStreamedConversationMessage`(`envelopeBytes`: kotlin.ByteArray): FfiMessage

    /**
     * Publish all unpublished messages
     */
    suspend fun `publishMessages`()

    suspend fun `removeAdmin`(`inboxId`: kotlin.String)

    suspend fun `removeMembers`(`accountAddresses`: List<kotlin.String>)

    suspend fun `removeMembersByInboxId`(`inboxIds`: List<kotlin.String>)

    suspend fun `removeSuperAdmin`(`inboxId`: kotlin.String)

    suspend fun `send`(`contentBytes`: kotlin.ByteArray): kotlin.ByteArray

    /**
     * send a message without immediately publishing to the delivery service.
     */
    fun `sendOptimistic`(`contentBytes`: kotlin.ByteArray): kotlin.ByteArray

    suspend fun `stream`(`messageCallback`: FfiMessageCallback): FfiStreamCloser

    fun `superAdminList`(): List<kotlin.String>

    suspend fun `sync`()

    fun `updateConsentState`(`state`: FfiConsentState)

    suspend fun `updateGroupDescription`(`groupDescription`: kotlin.String)

    suspend fun `updateGroupImageUrlSquare`(`groupImageUrlSquare`: kotlin.String)

    suspend fun `updateGroupName`(`groupName`: kotlin.String)

    suspend fun `updateGroupPinnedFrameUrl`(`pinnedFrameUrl`: kotlin.String)

    suspend fun `updatePermissionPolicy`(
        `permissionUpdateType`: FfiPermissionUpdateType,
        `permissionPolicyOption`: FfiPermissionPolicy,
        `metadataField`: FfiMetadataField?,
    )

    companion object
}

open class FfiConversation : Disposable, AutoCloseable, FfiConversationInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_fficonversation(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_fficonversation(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addAdmin`(`inboxId`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_add_admin(
                    thisPtr,
                    FfiConverterString.lower(`inboxId`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addMembers`(`accountAddresses`: List<kotlin.String>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_add_members(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addMembersByInboxId`(`inboxIds`: List<kotlin.String>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_add_members_by_inbox_id(
                    thisPtr,
                    FfiConverterSequenceString.lower(`inboxIds`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addSuperAdmin`(`inboxId`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_add_super_admin(
                    thisPtr,
                    FfiConverterString.lower(`inboxId`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `addedByInboxId`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_added_by_inbox_id(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `adminList`(): List<kotlin.String> {
        return FfiConverterSequenceString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_admin_list(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `consentState`(): FfiConsentState {
        return FfiConverterTypeFfiConsentState.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_consent_state(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `conversationType`(): FfiConversationType {
        return FfiConverterTypeFfiConversationType.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_conversation_type(
                        it, _status
                    )
                }
            }
        )
    }


    override fun `createdAtNs`(): kotlin.Long {
        return FfiConverterLong.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_created_at_ns(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `dmPeerInboxId`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_dm_peer_inbox_id(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `findMessages`(`opts`: FfiListMessagesOptions): List<FfiMessage> {
        return FfiConverterSequenceTypeFfiMessage.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_find_messages(
                        it, FfiConverterTypeFfiListMessagesOptions.lower(`opts`), _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `groupDescription`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_group_description(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `groupImageUrlSquare`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_group_image_url_square(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `groupMetadata`(): FfiConversationMetadata {
        return FfiConverterTypeFfiConversationMetadata.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_group_metadata(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `groupName`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_group_name(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `groupPermissions`(): FfiGroupPermissions {
        return FfiConverterTypeFfiGroupPermissions.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_group_permissions(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `groupPinnedFrameUrl`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_group_pinned_frame_url(
                        it, _status
                    )
                }
            }
        )
    }


    override fun `id`(): kotlin.ByteArray {
        return FfiConverterByteArray.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_id(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `isActive`(): kotlin.Boolean {
        return FfiConverterBoolean.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_is_active(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `isAdmin`(`inboxId`: kotlin.String): kotlin.Boolean {
        return FfiConverterBoolean.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_is_admin(
                        it, FfiConverterString.lower(`inboxId`), _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `isSuperAdmin`(`inboxId`: kotlin.String): kotlin.Boolean {
        return FfiConverterBoolean.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_is_super_admin(
                        it, FfiConverterString.lower(`inboxId`), _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `listMembers`(): List<FfiConversationMember> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_list_members(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceTypeFfiConversationMember.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(FfiSubscribeException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `processStreamedConversationMessage`(`envelopeBytes`: kotlin.ByteArray): FfiMessage {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_process_streamed_conversation_message(
                    thisPtr,
                    FfiConverterByteArray.lower(`envelopeBytes`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiMessage.lift(it) },
            // Error FFI converter
            FfiSubscribeException.ErrorHandler,
        )
    }


    /**
     * Publish all unpublished messages
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `publishMessages`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_publish_messages(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeAdmin`(`inboxId`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_remove_admin(
                    thisPtr,
                    FfiConverterString.lower(`inboxId`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeMembers`(`accountAddresses`: List<kotlin.String>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_remove_members(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeMembersByInboxId`(`inboxIds`: List<kotlin.String>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_remove_members_by_inbox_id(
                    thisPtr,
                    FfiConverterSequenceString.lower(`inboxIds`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `removeSuperAdmin`(`inboxId`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_remove_super_admin(
                    thisPtr,
                    FfiConverterString.lower(`inboxId`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `send`(`contentBytes`: kotlin.ByteArray): kotlin.ByteArray {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_send(
                    thisPtr,
                    FfiConverterByteArray.lower(`contentBytes`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterByteArray.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    /**
     * send a message without immediately publishing to the delivery service.
     */
    @Throws(GenericException::class)
    override fun `sendOptimistic`(`contentBytes`: kotlin.ByteArray): kotlin.ByteArray {
        return FfiConverterByteArray.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_send_optimistic(
                        it, FfiConverterByteArray.lower(`contentBytes`), _status
                    )
                }
            }
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `stream`(`messageCallback`: FfiMessageCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_stream(
                    thisPtr,
                    FfiConverterTypeFfiMessageCallback.lower(`messageCallback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `superAdminList`(): List<kotlin.String> {
        return FfiConverterSequenceString.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_super_admin_list(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sync`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_sync(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `updateConsentState`(`state`: FfiConsentState) =
        callWithPointer {
            uniffiRustCallWithError(GenericException) { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_update_consent_state(
                    it, FfiConverterTypeFfiConsentState.lower(`state`), _status
                )
            }
        }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updateGroupDescription`(`groupDescription`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_update_group_description(
                    thisPtr,
                    FfiConverterString.lower(`groupDescription`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updateGroupImageUrlSquare`(`groupImageUrlSquare`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_update_group_image_url_square(
                    thisPtr,
                    FfiConverterString.lower(`groupImageUrlSquare`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updateGroupName`(`groupName`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_update_group_name(
                    thisPtr,
                    FfiConverterString.lower(`groupName`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updateGroupPinnedFrameUrl`(`pinnedFrameUrl`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_update_group_pinned_frame_url(
                    thisPtr,
                    FfiConverterString.lower(`pinnedFrameUrl`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `updatePermissionPolicy`(
        `permissionUpdateType`: FfiPermissionUpdateType,
        `permissionPolicyOption`: FfiPermissionPolicy,
        `metadataField`: FfiMetadataField?,
    ) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversation_update_permission_policy(
                    thisPtr,
                    FfiConverterTypeFfiPermissionUpdateType.lower(`permissionUpdateType`),
                    FfiConverterTypeFfiPermissionPolicy.lower(`permissionPolicyOption`),
                    FfiConverterOptionalTypeFfiMetadataField.lower(`metadataField`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConversation : FfiConverter<FfiConversation, Pointer> {

    override fun lower(value: FfiConversation): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiConversation {
        return FfiConversation(value)
    }

    override fun read(buf: ByteBuffer): FfiConversation {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiConversation) = 8UL

    override fun write(value: FfiConversation, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiConversationCallback {

    fun `onConversation`(`conversation`: FfiConversation)

    fun `onError`(`error`: FfiSubscribeException)

    companion object
}

open class FfiConversationCallbackImpl : Disposable, AutoCloseable, FfiConversationCallback {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_fficonversationcallback(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_fficonversationcallback(pointer!!, status)
        }
    }

    override fun `onConversation`(`conversation`: FfiConversation) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversationcallback_on_conversation(
                    it, FfiConverterTypeFfiConversation.lower(`conversation`), _status
                )
            }
        }


    override fun `onError`(`error`: FfiSubscribeException) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversationcallback_on_error(
                    it, FfiConverterTypeFfiSubscribeError.lower(`error`), _status
                )
            }
        }


    companion object

}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceFfiConversationCallback {
    internal object `onConversation` : UniffiCallbackInterfaceFfiConversationCallbackMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `conversation`: Pointer,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiConversationCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onConversation`(
                    FfiConverterTypeFfiConversation.lift(`conversation`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object `onError` : UniffiCallbackInterfaceFfiConversationCallbackMethod1 {
        override fun callback(
            `uniffiHandle`: Long,
            `error`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiConversationCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterTypeFfiSubscribeError.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeFfiConversationCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceFfiConversationCallback.UniffiByValue(
        `onConversation`,
        `onError`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_vtable_fficonversationcallback(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConversationCallback :
    FfiConverter<FfiConversationCallback, Pointer> {
    internal val handleMap = UniffiHandleMap<FfiConversationCallback>()

    override fun lower(value: FfiConversationCallback): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): FfiConversationCallback {
        return FfiConversationCallbackImpl(value)
    }

    override fun read(buf: ByteBuffer): FfiConversationCallback {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiConversationCallback) = 8UL

    override fun write(value: FfiConversationCallback, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiConversationMetadataInterface {

    fun `conversationType`(): FfiConversationType

    fun `creatorInboxId`(): kotlin.String

    companion object
}

open class FfiConversationMetadata : Disposable, AutoCloseable, FfiConversationMetadataInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_fficonversationmetadata(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_fficonversationmetadata(pointer!!, status)
        }
    }

    override fun `conversationType`(): FfiConversationType {
        return FfiConverterTypeFfiConversationType.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversationmetadata_conversation_type(
                        it, _status
                    )
                }
            }
        )
    }


    override fun `creatorInboxId`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversationmetadata_creator_inbox_id(
                        it, _status
                    )
                }
            }
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConversationMetadata :
    FfiConverter<FfiConversationMetadata, Pointer> {

    override fun lower(value: FfiConversationMetadata): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiConversationMetadata {
        return FfiConversationMetadata(value)
    }

    override fun read(buf: ByteBuffer): FfiConversationMetadata {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiConversationMetadata) = 8UL

    override fun write(value: FfiConversationMetadata, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiConversationsInterface {

    suspend fun `createDm`(`accountAddress`: kotlin.String): FfiConversation

    suspend fun `createGroup`(
        `accountAddresses`: List<kotlin.String>,
        `opts`: FfiCreateGroupOptions,
    ): FfiConversation

    fun `getSyncGroup`(): FfiConversation

    suspend fun `list`(`opts`: FfiListConversationsOptions): List<FfiConversation>

    suspend fun `listDms`(`opts`: FfiListConversationsOptions): List<FfiConversation>

    suspend fun `listGroups`(`opts`: FfiListConversationsOptions): List<FfiConversation>

    suspend fun `processStreamedWelcomeMessage`(`envelopeBytes`: kotlin.ByteArray): FfiConversation

    suspend fun `stream`(`callback`: FfiConversationCallback): FfiStreamCloser

    suspend fun `streamAllDmMessages`(`messageCallback`: FfiMessageCallback): FfiStreamCloser

    suspend fun `streamAllGroupMessages`(`messageCallback`: FfiMessageCallback): FfiStreamCloser

    suspend fun `streamAllMessages`(`messageCallback`: FfiMessageCallback): FfiStreamCloser

    /**
     * Get notified when there is a new consent update either locally or is synced from another device
     * allowing the user to re-render the new state appropriately
     */
    suspend fun `streamConsent`(`callback`: FfiConsentCallback): FfiStreamCloser

    suspend fun `streamDms`(`callback`: FfiConversationCallback): FfiStreamCloser

    suspend fun `streamGroups`(`callback`: FfiConversationCallback): FfiStreamCloser

    suspend fun `streamMessages`(
        `messageCallback`: FfiMessageCallback,
        `conversationType`: FfiConversationType?,
    ): FfiStreamCloser

    /**
     * Get notified when a preference changes either locally or is synced from another device
     * allowing the user to re-render the new state appropriately.
     */
    suspend fun `streamPreferences`(`callback`: FfiPreferenceCallback): FfiStreamCloser

    suspend fun `sync`()

    suspend fun `syncAllConversations`(`consentState`: FfiConsentState?): kotlin.UInt

    companion object
}

open class FfiConversations : Disposable, AutoCloseable, FfiConversationsInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_fficonversations(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_fficonversations(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createDm`(`accountAddress`: kotlin.String): FfiConversation {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_create_dm(
                    thisPtr,
                    FfiConverterString.lower(`accountAddress`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiConversation.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `createGroup`(
        `accountAddresses`: List<kotlin.String>,
        `opts`: FfiCreateGroupOptions,
    ): FfiConversation {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_create_group(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                    FfiConverterTypeFfiCreateGroupOptions.lower(`opts`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiConversation.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `getSyncGroup`(): FfiConversation {
        return FfiConverterTypeFfiConversation.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_get_sync_group(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `list`(`opts`: FfiListConversationsOptions): List<FfiConversation> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_list(
                    thisPtr,
                    FfiConverterTypeFfiListConversationsOptions.lower(`opts`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceTypeFfiConversation.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `listDms`(`opts`: FfiListConversationsOptions): List<FfiConversation> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_list_dms(
                    thisPtr,
                    FfiConverterTypeFfiListConversationsOptions.lower(`opts`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceTypeFfiConversation.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `listGroups`(`opts`: FfiListConversationsOptions): List<FfiConversation> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_list_groups(
                    thisPtr,
                    FfiConverterTypeFfiListConversationsOptions.lower(`opts`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceTypeFfiConversation.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `processStreamedWelcomeMessage`(`envelopeBytes`: kotlin.ByteArray): FfiConversation {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_process_streamed_welcome_message(
                    thisPtr,
                    FfiConverterByteArray.lower(`envelopeBytes`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiConversation.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `stream`(`callback`: FfiConversationCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream(
                    thisPtr,
                    FfiConverterTypeFfiConversationCallback.lower(`callback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamAllDmMessages`(`messageCallback`: FfiMessageCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_all_dm_messages(
                    thisPtr,
                    FfiConverterTypeFfiMessageCallback.lower(`messageCallback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamAllGroupMessages`(`messageCallback`: FfiMessageCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_all_group_messages(
                    thisPtr,
                    FfiConverterTypeFfiMessageCallback.lower(`messageCallback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamAllMessages`(`messageCallback`: FfiMessageCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_all_messages(
                    thisPtr,
                    FfiConverterTypeFfiMessageCallback.lower(`messageCallback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    /**
     * Get notified when there is a new consent update either locally or is synced from another device
     * allowing the user to re-render the new state appropriately
     */
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamConsent`(`callback`: FfiConsentCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_consent(
                    thisPtr,
                    FfiConverterTypeFfiConsentCallback.lower(`callback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamDms`(`callback`: FfiConversationCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_dms(
                    thisPtr,
                    FfiConverterTypeFfiConversationCallback.lower(`callback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamGroups`(`callback`: FfiConversationCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_groups(
                    thisPtr,
                    FfiConverterTypeFfiConversationCallback.lower(`callback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamMessages`(
        `messageCallback`: FfiMessageCallback,
        `conversationType`: FfiConversationType?,
    ): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_messages(
                    thisPtr,
                    FfiConverterTypeFfiMessageCallback.lower(`messageCallback`),
                    FfiConverterOptionalTypeFfiConversationType.lower(`conversationType`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    /**
     * Get notified when a preference changes either locally or is synced from another device
     * allowing the user to re-render the new state appropriately.
     */
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `streamPreferences`(`callback`: FfiPreferenceCallback): FfiStreamCloser {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_stream_preferences(
                    thisPtr,
                    FfiConverterTypeFfiPreferenceCallback.lower(`callback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiStreamCloser.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sync`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_sync(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `syncAllConversations`(`consentState`: FfiConsentState?): kotlin.UInt {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_fficonversations_sync_all_conversations(
                    thisPtr,
                    FfiConverterOptionalTypeFfiConsentState.lower(`consentState`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_u32(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_u32(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_u32(future) },
            // lift function
            { FfiConverterUInt.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConversations : FfiConverter<FfiConversations, Pointer> {

    override fun lower(value: FfiConversations): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiConversations {
        return FfiConversations(value)
    }

    override fun read(buf: ByteBuffer): FfiConversations {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiConversations) = 8UL

    override fun write(value: FfiConversations, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiGroupPermissionsInterface {

    fun `policySet`(): FfiPermissionPolicySet

    fun `policyType`(): FfiGroupPermissionsOptions

    companion object
}

open class FfiGroupPermissions : Disposable, AutoCloseable, FfiGroupPermissionsInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffigrouppermissions(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffigrouppermissions(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    override fun `policySet`(): FfiPermissionPolicySet {
        return FfiConverterTypeFfiPermissionPolicySet.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigrouppermissions_policy_set(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `policyType`(): FfiGroupPermissionsOptions {
        return FfiConverterTypeFfiGroupPermissionsOptions.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffigrouppermissions_policy_type(
                        it, _status
                    )
                }
            }
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiGroupPermissions : FfiConverter<FfiGroupPermissions, Pointer> {

    override fun lower(value: FfiGroupPermissions): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiGroupPermissions {
        return FfiGroupPermissions(value)
    }

    override fun read(buf: ByteBuffer): FfiGroupPermissions {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiGroupPermissions) = 8UL

    override fun write(value: FfiGroupPermissions, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiMessageCallback {

    fun `onMessage`(`message`: FfiMessage)

    fun `onError`(`error`: FfiSubscribeException)

    companion object
}

open class FfiMessageCallbackImpl : Disposable, AutoCloseable, FfiMessageCallback {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffimessagecallback(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffimessagecallback(pointer!!, status)
        }
    }

    override fun `onMessage`(`message`: FfiMessage) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffimessagecallback_on_message(
                    it, FfiConverterTypeFfiMessage.lower(`message`), _status
                )
            }
        }


    override fun `onError`(`error`: FfiSubscribeException) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffimessagecallback_on_error(
                    it, FfiConverterTypeFfiSubscribeError.lower(`error`), _status
                )
            }
        }


    companion object

}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceFfiMessageCallback {
    internal object `onMessage` : UniffiCallbackInterfaceFfiMessageCallbackMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `message`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onMessage`(
                    FfiConverterTypeFfiMessage.lift(`message`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object `onError` : UniffiCallbackInterfaceFfiMessageCallbackMethod1 {
        override fun callback(
            `uniffiHandle`: Long,
            `error`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiMessageCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterTypeFfiSubscribeError.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeFfiMessageCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceFfiMessageCallback.UniffiByValue(
        `onMessage`,
        `onError`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_vtable_ffimessagecallback(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiMessageCallback : FfiConverter<FfiMessageCallback, Pointer> {
    internal val handleMap = UniffiHandleMap<FfiMessageCallback>()

    override fun lower(value: FfiMessageCallback): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): FfiMessageCallback {
        return FfiMessageCallbackImpl(value)
    }

    override fun read(buf: ByteBuffer): FfiMessageCallback {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiMessageCallback) = 8UL

    override fun write(value: FfiMessageCallback, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiPreferenceCallback {

    fun `onPreferenceUpdate`(`preference`: List<FfiPreferenceUpdate>)

    fun `onError`(`error`: FfiSubscribeException)

    companion object
}

open class FfiPreferenceCallbackImpl : Disposable, AutoCloseable, FfiPreferenceCallback {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffipreferencecallback(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffipreferencecallback(pointer!!, status)
        }
    }

    override fun `onPreferenceUpdate`(`preference`: List<FfiPreferenceUpdate>) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffipreferencecallback_on_preference_update(
                    it, FfiConverterSequenceTypeFfiPreferenceUpdate.lower(`preference`), _status
                )
            }
        }


    override fun `onError`(`error`: FfiSubscribeException) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffipreferencecallback_on_error(
                    it, FfiConverterTypeFfiSubscribeError.lower(`error`), _status
                )
            }
        }


    companion object

}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceFfiPreferenceCallback {
    internal object `onPreferenceUpdate` : UniffiCallbackInterfaceFfiPreferenceCallbackMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `preference`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiPreferenceCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onPreferenceUpdate`(
                    FfiConverterSequenceTypeFfiPreferenceUpdate.lift(`preference`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object `onError` : UniffiCallbackInterfaceFfiPreferenceCallbackMethod1 {
        override fun callback(
            `uniffiHandle`: Long,
            `error`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiPreferenceCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterTypeFfiSubscribeError.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeFfiPreferenceCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceFfiPreferenceCallback.UniffiByValue(
        `onPreferenceUpdate`,
        `onError`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_vtable_ffipreferencecallback(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiPreferenceCallback : FfiConverter<FfiPreferenceCallback, Pointer> {
    internal val handleMap = UniffiHandleMap<FfiPreferenceCallback>()

    override fun lower(value: FfiPreferenceCallback): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): FfiPreferenceCallback {
        return FfiPreferenceCallbackImpl(value)
    }

    override fun read(buf: ByteBuffer): FfiPreferenceCallback {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiPreferenceCallback) = 8UL

    override fun write(value: FfiPreferenceCallback, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiSignatureRequestInterface {

    suspend fun `addEcdsaSignature`(`signatureBytes`: kotlin.ByteArray)

    suspend fun `addScwSignature`(
        `signatureBytes`: kotlin.ByteArray,
        `address`: kotlin.String,
        `chainId`: kotlin.ULong,
        `blockNumber`: kotlin.ULong?,
    )

    suspend fun `isReady`(): kotlin.Boolean

    /**
     * missing signatures that are from [MemberKind::Address]
     */
    suspend fun `missingAddressSignatures`(): List<kotlin.String>

    suspend fun `signatureText`(): kotlin.String

    companion object
}

open class FfiSignatureRequest : Disposable, AutoCloseable, FfiSignatureRequestInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffisignaturerequest(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffisignaturerequest(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addEcdsaSignature`(`signatureBytes`: kotlin.ByteArray) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffisignaturerequest_add_ecdsa_signature(
                    thisPtr,
                    FfiConverterByteArray.lower(`signatureBytes`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addScwSignature`(
        `signatureBytes`: kotlin.ByteArray,
        `address`: kotlin.String,
        `chainId`: kotlin.ULong,
        `blockNumber`: kotlin.ULong?,
    ) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffisignaturerequest_add_scw_signature(
                    thisPtr,
                    FfiConverterByteArray.lower(`signatureBytes`),
                    FfiConverterString.lower(`address`),
                    FfiConverterULong.lower(`chainId`),
                    FfiConverterOptionalULong.lower(`blockNumber`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `isReady`(): kotlin.Boolean {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffisignaturerequest_is_ready(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_i8(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_i8(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_i8(future) },
            // lift function
            { FfiConverterBoolean.lift(it) },
            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    /**
     * missing signatures that are from [MemberKind::Address]
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `missingAddressSignatures`(): List<kotlin.String> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffisignaturerequest_missing_address_signatures(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceString.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `signatureText`(): kotlin.String {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffisignaturerequest_signature_text(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterString.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiSignatureRequest : FfiConverter<FfiSignatureRequest, Pointer> {

    override fun lower(value: FfiSignatureRequest): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiSignatureRequest {
        return FfiSignatureRequest(value)
    }

    override fun read(buf: ByteBuffer): FfiSignatureRequest {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiSignatureRequest) = 8UL

    override fun write(value: FfiSignatureRequest, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiStreamCloserInterface {

    /**
     * Signal the stream to end
     * Does not wait for the stream to end.
     */
    fun `end`()

    /**
     * End the stream and asyncronously wait for it to shutdown
     */
    suspend fun `endAndWait`()

    fun `isClosed`(): kotlin.Boolean

    suspend fun `waitForReady`()

    companion object
}

open class FfiStreamCloser : Disposable, AutoCloseable, FfiStreamCloserInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffistreamcloser(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffistreamcloser(pointer!!, status)
        }
    }


    /**
     * Signal the stream to end
     * Does not wait for the stream to end.
     */
    override fun `end`() =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffistreamcloser_end(
                    it, _status
                )
            }
        }


    /**
     * End the stream and asyncronously wait for it to shutdown
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `endAndWait`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffistreamcloser_end_and_wait(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    override fun `isClosed`(): kotlin.Boolean {
        return FfiConverterBoolean.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffistreamcloser_is_closed(
                        it, _status
                    )
                }
            }
        )
    }


    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `waitForReady`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffistreamcloser_wait_for_ready(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            UniffiNullRustCallStatusErrorHandler,
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiStreamCloser : FfiConverter<FfiStreamCloser, Pointer> {

    override fun lower(value: FfiStreamCloser): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiStreamCloser {
        return FfiStreamCloser(value)
    }

    override fun read(buf: ByteBuffer): FfiStreamCloser {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiStreamCloser) = 8UL

    override fun write(value: FfiStreamCloser, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiV2ApiClientInterface {

    suspend fun `batchQuery`(`req`: FfiV2BatchQueryRequest): FfiV2BatchQueryResponse

    suspend fun `publish`(`request`: FfiPublishRequest, `authToken`: kotlin.String)

    suspend fun `query`(`request`: FfiV2QueryRequest): FfiV2QueryResponse

    fun `setAppVersion`(`version`: kotlin.String)

    suspend fun `subscribe`(
        `request`: FfiV2SubscribeRequest,
        `callback`: FfiV2SubscriptionCallback,
    ): FfiV2Subscription

    companion object
}

open class FfiV2ApiClient : Disposable, AutoCloseable, FfiV2ApiClientInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffiv2apiclient(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffiv2apiclient(pointer!!, status)
        }
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `batchQuery`(`req`: FfiV2BatchQueryRequest): FfiV2BatchQueryResponse {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_batch_query(
                    thisPtr,
                    FfiConverterTypeFfiV2BatchQueryRequest.lower(`req`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiV2BatchQueryResponse.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `publish`(`request`: FfiPublishRequest, `authToken`: kotlin.String) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_publish(
                    thisPtr,
                    FfiConverterTypeFfiPublishRequest.lower(`request`),
                    FfiConverterString.lower(`authToken`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `query`(`request`: FfiV2QueryRequest): FfiV2QueryResponse {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_query(
                    thisPtr,
                    FfiConverterTypeFfiV2QueryRequest.lower(`request`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiV2QueryResponse.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    override fun `setAppVersion`(`version`: kotlin.String) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_set_app_version(
                    it, FfiConverterString.lower(`version`), _status
                )
            }
        }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `subscribe`(
        `request`: FfiV2SubscribeRequest,
        `callback`: FfiV2SubscriptionCallback,
    ): FfiV2Subscription {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2apiclient_subscribe(
                    thisPtr,
                    FfiConverterTypeFfiV2SubscribeRequest.lower(`request`),
                    FfiConverterTypeFfiV2SubscriptionCallback.lower(`callback`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiV2Subscription.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2ApiClient : FfiConverter<FfiV2ApiClient, Pointer> {

    override fun lower(value: FfiV2ApiClient): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiV2ApiClient {
        return FfiV2ApiClient(value)
    }

    override fun read(buf: ByteBuffer): FfiV2ApiClient {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiV2ApiClient) = 8UL

    override fun write(value: FfiV2ApiClient, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


/**
 * Subscription to a stream of V2 Messages
 */
public interface FfiV2SubscriptionInterface {

    /**
     * End the subscription, waiting for the subscription to close entirely.
     * # Errors
     * * Errors if subscription event task encounters join error
     */
    suspend fun `end`()

    /**
     * Check if the subscription is closed
     */
    fun `isClosed`(): kotlin.Boolean

    /**
     * Update subscription with new topics
     */
    suspend fun `update`(`req`: FfiV2SubscribeRequest)

    companion object
}

/**
 * Subscription to a stream of V2 Messages
 */
open class FfiV2Subscription : Disposable, AutoCloseable, FfiV2SubscriptionInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffiv2subscription(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffiv2subscription(pointer!!, status)
        }
    }


    /**
     * End the subscription, waiting for the subscription to close entirely.
     * # Errors
     * * Errors if subscription event task encounters join error
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `end`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscription_end(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    /**
     * Check if the subscription is closed
     */
    override fun `isClosed`(): kotlin.Boolean {
        return FfiConverterBoolean.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscription_is_closed(
                        it, _status
                    )
                }
            }
        )
    }


    /**
     * Update subscription with new topics
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `update`(`req`: FfiV2SubscribeRequest) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscription_update(
                    thisPtr,
                    FfiConverterTypeFfiV2SubscribeRequest.lower(`req`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2Subscription : FfiConverter<FfiV2Subscription, Pointer> {

    override fun lower(value: FfiV2Subscription): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiV2Subscription {
        return FfiV2Subscription(value)
    }

    override fun read(buf: ByteBuffer): FfiV2Subscription {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiV2Subscription) = 8UL

    override fun write(value: FfiV2Subscription, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiV2SubscriptionCallback {

    fun `onMessage`(`message`: FfiEnvelope)

    fun `onError`(`error`: GenericException)

    companion object
}

open class FfiV2SubscriptionCallbackImpl : Disposable, AutoCloseable, FfiV2SubscriptionCallback {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffiv2subscriptioncallback(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffiv2subscriptioncallback(pointer!!, status)
        }
    }

    override fun `onMessage`(`message`: FfiEnvelope) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscriptioncallback_on_message(
                    it, FfiConverterTypeFfiEnvelope.lower(`message`), _status
                )
            }
        }


    override fun `onError`(`error`: GenericException) =
        callWithPointer {
            uniffiRustCall() { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffiv2subscriptioncallback_on_error(
                    it, FfiConverterTypeGenericError.lower(`error`), _status
                )
            }
        }


    companion object

}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceFfiV2SubscriptionCallback {
    internal object `onMessage` : UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `message`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiV2SubscriptionCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onMessage`(
                    FfiConverterTypeFfiEnvelope.lift(`message`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object `onError` : UniffiCallbackInterfaceFfiV2SubscriptionCallbackMethod1 {
        override fun callback(
            `uniffiHandle`: Long,
            `error`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiV2SubscriptionCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterTypeGenericError.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeFfiV2SubscriptionCallback.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceFfiV2SubscriptionCallback.UniffiByValue(
        `onMessage`,
        `onError`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_vtable_ffiv2subscriptioncallback(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2SubscriptionCallback :
    FfiConverter<FfiV2SubscriptionCallback, Pointer> {
    internal val handleMap = UniffiHandleMap<FfiV2SubscriptionCallback>()

    override fun lower(value: FfiV2SubscriptionCallback): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): FfiV2SubscriptionCallback {
        return FfiV2SubscriptionCallbackImpl(value)
    }

    override fun read(buf: ByteBuffer): FfiV2SubscriptionCallback {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiV2SubscriptionCallback) = 8UL

    override fun write(value: FfiV2SubscriptionCallback, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface FfiXmtpClientInterface {

    /**
     * Adds a wallet address to the existing client
     */
    suspend fun `addWallet`(`newWalletAddress`: kotlin.String): FfiSignatureRequest

    /**
     * * Get the inbox state for each `inbox_id`.
     *      *
     *      * If `refresh_from_network` is true, the client will go to the network first to refresh the state.
     *      * Otherwise, the state will be read from the local database.
     */
    suspend fun `addressesFromInboxId`(
        `refreshFromNetwork`: kotlin.Boolean,
        `inboxIds`: List<kotlin.String>,
    ): List<FfiInboxState>

    suspend fun `applySignatureRequest`(`signatureRequest`: FfiSignatureRequest)

    suspend fun `canMessage`(`accountAddresses`: List<kotlin.String>): Map<kotlin.String, kotlin.Boolean>

    fun `conversation`(`conversationId`: kotlin.ByteArray): FfiConversation

    fun `conversations`(): FfiConversations

    suspend fun `dbReconnect`()

    fun `dmConversation`(`targetInboxId`: kotlin.String): FfiConversation

    suspend fun `findInboxId`(`address`: kotlin.String): kotlin.String?

    suspend fun `getConsentState`(
        `entityType`: FfiConsentEntityType,
        `entity`: kotlin.String,
    ): FfiConsentState

    fun `getHmacKeys`(): List<FfiHmacKey>

    suspend fun `getLatestInboxState`(`inboxId`: kotlin.String): FfiInboxState

    fun `inboxId`(): kotlin.String

    /**
     * * Get the client's inbox state.
     *      *
     *      * If `refresh_from_network` is true, the client will go to the network first to refresh the state.
     *      * Otherwise, the state will be read from the local database.
     */
    suspend fun `inboxState`(`refreshFromNetwork`: kotlin.Boolean): FfiInboxState

    fun `installationId`(): kotlin.ByteArray

    fun `message`(`messageId`: kotlin.ByteArray): FfiMessage

    suspend fun `registerIdentity`(`signatureRequest`: FfiSignatureRequest)

    fun `releaseDbConnection`()

    /**
     * * Revokes all installations except the one the client is currently using
     */
    suspend fun `revokeAllOtherInstallations`(): FfiSignatureRequest

    /**
     * Revokes or removes an identity - really a wallet address - from the existing client
     */
    suspend fun `revokeWallet`(`walletAddress`: kotlin.String): FfiSignatureRequest

    suspend fun `sendSyncRequest`(`kind`: FfiDeviceSyncKind)

    suspend fun `setConsentStates`(`records`: List<FfiConsent>)

    fun `signWithInstallationKey`(`text`: kotlin.String): kotlin.ByteArray

    fun `signatureRequest`(): FfiSignatureRequest?

    fun `verifySignedWithInstallationKey`(
        `signatureText`: kotlin.String,
        `signatureBytes`: kotlin.ByteArray,
    )

    fun `verifySignedWithPublicKey`(
        `signatureText`: kotlin.String,
        `signatureBytes`: kotlin.ByteArray,
        `publicKey`: kotlin.ByteArray,
    )

    companion object
}

open class FfiXmtpClient : Disposable, AutoCloseable, FfiXmtpClientInterface {

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_free_ffixmtpclient(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_clone_ffixmtpclient(pointer!!, status)
        }
    }


    /**
     * Adds a wallet address to the existing client
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addWallet`(`newWalletAddress`: kotlin.String): FfiSignatureRequest {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_add_wallet(
                    thisPtr,
                    FfiConverterString.lower(`newWalletAddress`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiSignatureRequest.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    /**
     * * Get the inbox state for each `inbox_id`.
     *      *
     *      * If `refresh_from_network` is true, the client will go to the network first to refresh the state.
     *      * Otherwise, the state will be read from the local database.
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `addressesFromInboxId`(
        `refreshFromNetwork`: kotlin.Boolean,
        `inboxIds`: List<kotlin.String>,
    ): List<FfiInboxState> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_addresses_from_inbox_id(
                    thisPtr,
                    FfiConverterBoolean.lower(`refreshFromNetwork`),
                    FfiConverterSequenceString.lower(`inboxIds`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterSequenceTypeFfiInboxState.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `applySignatureRequest`(`signatureRequest`: FfiSignatureRequest) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_apply_signature_request(
                    thisPtr,
                    FfiConverterTypeFfiSignatureRequest.lower(`signatureRequest`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `canMessage`(`accountAddresses`: List<kotlin.String>): Map<kotlin.String, kotlin.Boolean> {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_can_message(
                    thisPtr,
                    FfiConverterSequenceString.lower(`accountAddresses`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterMapStringBoolean.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `conversation`(`conversationId`: kotlin.ByteArray): FfiConversation {
        return FfiConverterTypeFfiConversation.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_conversation(
                        it, FfiConverterByteArray.lower(`conversationId`), _status
                    )
                }
            }
        )
    }


    override fun `conversations`(): FfiConversations {
        return FfiConverterTypeFfiConversations.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_conversations(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `dbReconnect`() {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_db_reconnect(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `dmConversation`(`targetInboxId`: kotlin.String): FfiConversation {
        return FfiConverterTypeFfiConversation.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_dm_conversation(
                        it, FfiConverterString.lower(`targetInboxId`), _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `findInboxId`(`address`: kotlin.String): kotlin.String? {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_find_inbox_id(
                    thisPtr,
                    FfiConverterString.lower(`address`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterOptionalString.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getConsentState`(
        `entityType`: FfiConsentEntityType,
        `entity`: kotlin.String,
    ): FfiConsentState {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_get_consent_state(
                    thisPtr,
                    FfiConverterTypeFfiConsentEntityType.lower(`entityType`),
                    FfiConverterString.lower(`entity`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiConsentState.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `getHmacKeys`(): List<FfiHmacKey> {
        return FfiConverterSequenceTypeFfiHmacKey.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_get_hmac_keys(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getLatestInboxState`(`inboxId`: kotlin.String): FfiInboxState {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_get_latest_inbox_state(
                    thisPtr,
                    FfiConverterString.lower(`inboxId`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiInboxState.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    override fun `inboxId`(): kotlin.String {
        return FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_inbox_id(
                        it, _status
                    )
                }
            }
        )
    }


    /**
     * * Get the client's inbox state.
     *      *
     *      * If `refresh_from_network` is true, the client will go to the network first to refresh the state.
     *      * Otherwise, the state will be read from the local database.
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `inboxState`(`refreshFromNetwork`: kotlin.Boolean): FfiInboxState {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_inbox_state(
                    thisPtr,
                    FfiConverterBoolean.lower(`refreshFromNetwork`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
            // lift function
            { FfiConverterTypeFfiInboxState.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }

    override fun `installationId`(): kotlin.ByteArray {
        return FfiConverterByteArray.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_installation_id(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `message`(`messageId`: kotlin.ByteArray): FfiMessage {
        return FfiConverterTypeFfiMessage.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_message(
                        it, FfiConverterByteArray.lower(`messageId`), _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `registerIdentity`(`signatureRequest`: FfiSignatureRequest) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_register_identity(
                    thisPtr,
                    FfiConverterTypeFfiSignatureRequest.lower(`signatureRequest`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `releaseDbConnection`() =
        callWithPointer {
            uniffiRustCallWithError(GenericException) { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_release_db_connection(
                    it, _status
                )
            }
        }


    /**
     * * Revokes all installations except the one the client is currently using
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `revokeAllOtherInstallations`(): FfiSignatureRequest {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_revoke_all_other_installations(
                    thisPtr,

                    )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiSignatureRequest.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    /**
     * Revokes or removes an identity - really a wallet address - from the existing client
     */
    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `revokeWallet`(`walletAddress`: kotlin.String): FfiSignatureRequest {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_revoke_wallet(
                    thisPtr,
                    FfiConverterString.lower(`walletAddress`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
            // lift function
            { FfiConverterTypeFfiSignatureRequest.lift(it) },
            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `sendSyncRequest`(`kind`: FfiDeviceSyncKind) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_send_sync_request(
                    thisPtr,
                    FfiConverterTypeFfiDeviceSyncKind.lower(`kind`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `setConsentStates`(`records`: List<FfiConsent>) {
        return uniffiRustCallAsync(
            callWithPointer { thisPtr ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_set_consent_states(
                    thisPtr,
                    FfiConverterSequenceTypeFfiConsent.lower(`records`),
                )
            },
            { future, callback, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_void(
                    future,
                    callback,
                    continuation
                )
            },
            { future, continuation ->
                UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_void(
                    future,
                    continuation
                )
            },
            { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_void(future) },
            // lift function
            { Unit },

            // Error FFI converter
            GenericException.ErrorHandler,
        )
    }


    @Throws(GenericException::class)
    override fun `signWithInstallationKey`(`text`: kotlin.String): kotlin.ByteArray {
        return FfiConverterByteArray.lift(
            callWithPointer {
                uniffiRustCallWithError(GenericException) { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_sign_with_installation_key(
                        it, FfiConverterString.lower(`text`), _status
                    )
                }
            }
        )
    }


    override fun `signatureRequest`(): FfiSignatureRequest? {
        return FfiConverterOptionalTypeFfiSignatureRequest.lift(
            callWithPointer {
                uniffiRustCall() { _status ->
                    UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_signature_request(
                        it, _status
                    )
                }
            }
        )
    }


    @Throws(GenericException::class)
    override fun `verifySignedWithInstallationKey`(
        `signatureText`: kotlin.String,
        `signatureBytes`: kotlin.ByteArray,
    ) =
        callWithPointer {
            uniffiRustCallWithError(GenericException) { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_verify_signed_with_installation_key(
                    it,
                    FfiConverterString.lower(`signatureText`),
                    FfiConverterByteArray.lower(`signatureBytes`),
                    _status
                )
            }
        }


    @Throws(GenericException::class)
    override fun `verifySignedWithPublicKey`(
        `signatureText`: kotlin.String,
        `signatureBytes`: kotlin.ByteArray,
        `publicKey`: kotlin.ByteArray,
    ) =
        callWithPointer {
            uniffiRustCallWithError(GenericException) { _status ->
                UniffiLib.INSTANCE.uniffi_xmtpv3_fn_method_ffixmtpclient_verify_signed_with_public_key(
                    it,
                    FfiConverterString.lower(`signatureText`),
                    FfiConverterByteArray.lower(`signatureBytes`),
                    FfiConverterByteArray.lower(`publicKey`),
                    _status
                )
            }
        }


    companion object

}

/**
 * @suppress
 */
public object FfiConverterTypeFfiXmtpClient : FfiConverter<FfiXmtpClient, Pointer> {

    override fun lower(value: FfiXmtpClient): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): FfiXmtpClient {
        return FfiXmtpClient(value)
    }

    override fun read(buf: ByteBuffer): FfiXmtpClient {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: FfiXmtpClient) = 8UL

    override fun write(value: FfiXmtpClient, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


data class FfiConsent(
    var `entityType`: FfiConsentEntityType,
    var `state`: FfiConsentState,
    var `entity`: kotlin.String,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConsent : FfiConverterRustBuffer<FfiConsent> {
    override fun read(buf: ByteBuffer): FfiConsent {
        return FfiConsent(
            FfiConverterTypeFfiConsentEntityType.read(buf),
            FfiConverterTypeFfiConsentState.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiConsent) = (
            FfiConverterTypeFfiConsentEntityType.allocationSize(value.`entityType`) +
                    FfiConverterTypeFfiConsentState.allocationSize(value.`state`) +
                    FfiConverterString.allocationSize(value.`entity`)
            )

    override fun write(value: FfiConsent, buf: ByteBuffer) {
        FfiConverterTypeFfiConsentEntityType.write(value.`entityType`, buf)
        FfiConverterTypeFfiConsentState.write(value.`state`, buf)
        FfiConverterString.write(value.`entity`, buf)
    }
}


data class FfiConversationMember(
    var `inboxId`: kotlin.String,
    var `accountAddresses`: List<kotlin.String>,
    var `installationIds`: List<kotlin.ByteArray>,
    var `permissionLevel`: FfiPermissionLevel,
    var `consentState`: FfiConsentState,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiConversationMember :
    FfiConverterRustBuffer<FfiConversationMember> {
    override fun read(buf: ByteBuffer): FfiConversationMember {
        return FfiConversationMember(
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceByteArray.read(buf),
            FfiConverterTypeFfiPermissionLevel.read(buf),
            FfiConverterTypeFfiConsentState.read(buf),
        )
    }

    override fun allocationSize(value: FfiConversationMember) = (
            FfiConverterString.allocationSize(value.`inboxId`) +
                    FfiConverterSequenceString.allocationSize(value.`accountAddresses`) +
                    FfiConverterSequenceByteArray.allocationSize(value.`installationIds`) +
                    FfiConverterTypeFfiPermissionLevel.allocationSize(value.`permissionLevel`) +
                    FfiConverterTypeFfiConsentState.allocationSize(value.`consentState`)
            )

    override fun write(value: FfiConversationMember, buf: ByteBuffer) {
        FfiConverterString.write(value.`inboxId`, buf)
        FfiConverterSequenceString.write(value.`accountAddresses`, buf)
        FfiConverterSequenceByteArray.write(value.`installationIds`, buf)
        FfiConverterTypeFfiPermissionLevel.write(value.`permissionLevel`, buf)
        FfiConverterTypeFfiConsentState.write(value.`consentState`, buf)
    }
}


data class FfiCreateGroupOptions(
    var `permissions`: FfiGroupPermissionsOptions?,
    var `groupName`: kotlin.String?,
    var `groupImageUrlSquare`: kotlin.String?,
    var `groupDescription`: kotlin.String?,
    var `groupPinnedFrameUrl`: kotlin.String?,
    var `customPermissionPolicySet`: FfiPermissionPolicySet?,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiCreateGroupOptions :
    FfiConverterRustBuffer<FfiCreateGroupOptions> {
    override fun read(buf: ByteBuffer): FfiCreateGroupOptions {
        return FfiCreateGroupOptions(
            FfiConverterOptionalTypeFfiGroupPermissionsOptions.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalTypeFfiPermissionPolicySet.read(buf),
        )
    }

    override fun allocationSize(value: FfiCreateGroupOptions) = (
            FfiConverterOptionalTypeFfiGroupPermissionsOptions.allocationSize(value.`permissions`) +
                    FfiConverterOptionalString.allocationSize(value.`groupName`) +
                    FfiConverterOptionalString.allocationSize(value.`groupImageUrlSquare`) +
                    FfiConverterOptionalString.allocationSize(value.`groupDescription`) +
                    FfiConverterOptionalString.allocationSize(value.`groupPinnedFrameUrl`) +
                    FfiConverterOptionalTypeFfiPermissionPolicySet.allocationSize(value.`customPermissionPolicySet`)
            )

    override fun write(value: FfiCreateGroupOptions, buf: ByteBuffer) {
        FfiConverterOptionalTypeFfiGroupPermissionsOptions.write(value.`permissions`, buf)
        FfiConverterOptionalString.write(value.`groupName`, buf)
        FfiConverterOptionalString.write(value.`groupImageUrlSquare`, buf)
        FfiConverterOptionalString.write(value.`groupDescription`, buf)
        FfiConverterOptionalString.write(value.`groupPinnedFrameUrl`, buf)
        FfiConverterOptionalTypeFfiPermissionPolicySet.write(value.`customPermissionPolicySet`, buf)
    }
}


data class FfiCursor(
    var `digest`: kotlin.ByteArray,
    var `senderTimeNs`: kotlin.ULong,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiCursor : FfiConverterRustBuffer<FfiCursor> {
    override fun read(buf: ByteBuffer): FfiCursor {
        return FfiCursor(
            FfiConverterByteArray.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: FfiCursor) = (
            FfiConverterByteArray.allocationSize(value.`digest`) +
                    FfiConverterULong.allocationSize(value.`senderTimeNs`)
            )

    override fun write(value: FfiCursor, buf: ByteBuffer) {
        FfiConverterByteArray.write(value.`digest`, buf)
        FfiConverterULong.write(value.`senderTimeNs`, buf)
    }
}


data class FfiEnvelope(
    var `contentTopic`: kotlin.String,
    var `timestampNs`: kotlin.ULong,
    var `message`: kotlin.ByteArray,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiEnvelope : FfiConverterRustBuffer<FfiEnvelope> {
    override fun read(buf: ByteBuffer): FfiEnvelope {
        return FfiEnvelope(
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterByteArray.read(buf),
        )
    }

    override fun allocationSize(value: FfiEnvelope) = (
            FfiConverterString.allocationSize(value.`contentTopic`) +
                    FfiConverterULong.allocationSize(value.`timestampNs`) +
                    FfiConverterByteArray.allocationSize(value.`message`)
            )

    override fun write(value: FfiEnvelope, buf: ByteBuffer) {
        FfiConverterString.write(value.`contentTopic`, buf)
        FfiConverterULong.write(value.`timestampNs`, buf)
        FfiConverterByteArray.write(value.`message`, buf)
    }
}


data class FfiHmacKey(
    var `key`: kotlin.ByteArray,
    var `epoch`: kotlin.Long,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiHmacKey : FfiConverterRustBuffer<FfiHmacKey> {
    override fun read(buf: ByteBuffer): FfiHmacKey {
        return FfiHmacKey(
            FfiConverterByteArray.read(buf),
            FfiConverterLong.read(buf),
        )
    }

    override fun allocationSize(value: FfiHmacKey) = (
            FfiConverterByteArray.allocationSize(value.`key`) +
                    FfiConverterLong.allocationSize(value.`epoch`)
            )

    override fun write(value: FfiHmacKey, buf: ByteBuffer) {
        FfiConverterByteArray.write(value.`key`, buf)
        FfiConverterLong.write(value.`epoch`, buf)
    }
}


data class FfiInboxState(
    var `inboxId`: kotlin.String,
    var `recoveryAddress`: kotlin.String,
    var `installations`: List<FfiInstallation>,
    var `accountAddresses`: List<kotlin.String>,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiInboxState : FfiConverterRustBuffer<FfiInboxState> {
    override fun read(buf: ByteBuffer): FfiInboxState {
        return FfiInboxState(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeFfiInstallation.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: FfiInboxState) = (
            FfiConverterString.allocationSize(value.`inboxId`) +
                    FfiConverterString.allocationSize(value.`recoveryAddress`) +
                    FfiConverterSequenceTypeFfiInstallation.allocationSize(value.`installations`) +
                    FfiConverterSequenceString.allocationSize(value.`accountAddresses`)
            )

    override fun write(value: FfiInboxState, buf: ByteBuffer) {
        FfiConverterString.write(value.`inboxId`, buf)
        FfiConverterString.write(value.`recoveryAddress`, buf)
        FfiConverterSequenceTypeFfiInstallation.write(value.`installations`, buf)
        FfiConverterSequenceString.write(value.`accountAddresses`, buf)
    }
}


data class FfiInstallation(
    var `id`: kotlin.ByteArray,
    var `clientTimestampNs`: kotlin.ULong?,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiInstallation : FfiConverterRustBuffer<FfiInstallation> {
    override fun read(buf: ByteBuffer): FfiInstallation {
        return FfiInstallation(
            FfiConverterByteArray.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: FfiInstallation) = (
            FfiConverterByteArray.allocationSize(value.`id`) +
                    FfiConverterOptionalULong.allocationSize(value.`clientTimestampNs`)
            )

    override fun write(value: FfiInstallation, buf: ByteBuffer) {
        FfiConverterByteArray.write(value.`id`, buf)
        FfiConverterOptionalULong.write(value.`clientTimestampNs`, buf)
    }
}


data class FfiListConversationsOptions(
    var `createdAfterNs`: kotlin.Long?,
    var `createdBeforeNs`: kotlin.Long?,
    var `limit`: kotlin.Long?,
    var `consentState`: FfiConsentState?,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiListConversationsOptions :
    FfiConverterRustBuffer<FfiListConversationsOptions> {
    override fun read(buf: ByteBuffer): FfiListConversationsOptions {
        return FfiListConversationsOptions(
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalTypeFfiConsentState.read(buf),
        )
    }

    override fun allocationSize(value: FfiListConversationsOptions) = (
            FfiConverterOptionalLong.allocationSize(value.`createdAfterNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`createdBeforeNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`limit`) +
                    FfiConverterOptionalTypeFfiConsentState.allocationSize(value.`consentState`)
            )

    override fun write(value: FfiListConversationsOptions, buf: ByteBuffer) {
        FfiConverterOptionalLong.write(value.`createdAfterNs`, buf)
        FfiConverterOptionalLong.write(value.`createdBeforeNs`, buf)
        FfiConverterOptionalLong.write(value.`limit`, buf)
        FfiConverterOptionalTypeFfiConsentState.write(value.`consentState`, buf)
    }
}


data class FfiListMessagesOptions(
    var `sentBeforeNs`: kotlin.Long?,
    var `sentAfterNs`: kotlin.Long?,
    var `limit`: kotlin.Long?,
    var `deliveryStatus`: FfiDeliveryStatus?,
    var `direction`: FfiDirection?,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiListMessagesOptions :
    FfiConverterRustBuffer<FfiListMessagesOptions> {
    override fun read(buf: ByteBuffer): FfiListMessagesOptions {
        return FfiListMessagesOptions(
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalLong.read(buf),
            FfiConverterOptionalTypeFfiDeliveryStatus.read(buf),
            FfiConverterOptionalTypeFfiDirection.read(buf),
        )
    }

    override fun allocationSize(value: FfiListMessagesOptions) = (
            FfiConverterOptionalLong.allocationSize(value.`sentBeforeNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`sentAfterNs`) +
                    FfiConverterOptionalLong.allocationSize(value.`limit`) +
                    FfiConverterOptionalTypeFfiDeliveryStatus.allocationSize(value.`deliveryStatus`) +
                    FfiConverterOptionalTypeFfiDirection.allocationSize(value.`direction`)
            )

    override fun write(value: FfiListMessagesOptions, buf: ByteBuffer) {
        FfiConverterOptionalLong.write(value.`sentBeforeNs`, buf)
        FfiConverterOptionalLong.write(value.`sentAfterNs`, buf)
        FfiConverterOptionalLong.write(value.`limit`, buf)
        FfiConverterOptionalTypeFfiDeliveryStatus.write(value.`deliveryStatus`, buf)
        FfiConverterOptionalTypeFfiDirection.write(value.`direction`, buf)
    }
}


data class FfiMessage(
    var `id`: kotlin.ByteArray,
    var `sentAtNs`: kotlin.Long,
    var `convoId`: kotlin.ByteArray,
    var `senderInboxId`: kotlin.String,
    var `content`: kotlin.ByteArray,
    var `kind`: FfiConversationMessageKind,
    var `deliveryStatus`: FfiDeliveryStatus,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiMessage : FfiConverterRustBuffer<FfiMessage> {
    override fun read(buf: ByteBuffer): FfiMessage {
        return FfiMessage(
            FfiConverterByteArray.read(buf),
            FfiConverterLong.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterString.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterTypeFfiConversationMessageKind.read(buf),
            FfiConverterTypeFfiDeliveryStatus.read(buf),
        )
    }

    override fun allocationSize(value: FfiMessage) = (
            FfiConverterByteArray.allocationSize(value.`id`) +
                    FfiConverterLong.allocationSize(value.`sentAtNs`) +
                    FfiConverterByteArray.allocationSize(value.`convoId`) +
                    FfiConverterString.allocationSize(value.`senderInboxId`) +
                    FfiConverterByteArray.allocationSize(value.`content`) +
                    FfiConverterTypeFfiConversationMessageKind.allocationSize(value.`kind`) +
                    FfiConverterTypeFfiDeliveryStatus.allocationSize(value.`deliveryStatus`)
            )

    override fun write(value: FfiMessage, buf: ByteBuffer) {
        FfiConverterByteArray.write(value.`id`, buf)
        FfiConverterLong.write(value.`sentAtNs`, buf)
        FfiConverterByteArray.write(value.`convoId`, buf)
        FfiConverterString.write(value.`senderInboxId`, buf)
        FfiConverterByteArray.write(value.`content`, buf)
        FfiConverterTypeFfiConversationMessageKind.write(value.`kind`, buf)
        FfiConverterTypeFfiDeliveryStatus.write(value.`deliveryStatus`, buf)
    }
}


data class FfiPagingInfo(
    var `limit`: kotlin.UInt,
    var `cursor`: FfiCursor?,
    var `direction`: FfiSortDirection,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiPagingInfo : FfiConverterRustBuffer<FfiPagingInfo> {
    override fun read(buf: ByteBuffer): FfiPagingInfo {
        return FfiPagingInfo(
            FfiConverterUInt.read(buf),
            FfiConverterOptionalTypeFfiCursor.read(buf),
            FfiConverterTypeFfiSortDirection.read(buf),
        )
    }

    override fun allocationSize(value: FfiPagingInfo) = (
            FfiConverterUInt.allocationSize(value.`limit`) +
                    FfiConverterOptionalTypeFfiCursor.allocationSize(value.`cursor`) +
                    FfiConverterTypeFfiSortDirection.allocationSize(value.`direction`)
            )

    override fun write(value: FfiPagingInfo, buf: ByteBuffer) {
        FfiConverterUInt.write(value.`limit`, buf)
        FfiConverterOptionalTypeFfiCursor.write(value.`cursor`, buf)
        FfiConverterTypeFfiSortDirection.write(value.`direction`, buf)
    }
}


data class FfiPermissionPolicySet(
    var `addMemberPolicy`: FfiPermissionPolicy,
    var `removeMemberPolicy`: FfiPermissionPolicy,
    var `addAdminPolicy`: FfiPermissionPolicy,
    var `removeAdminPolicy`: FfiPermissionPolicy,
    var `updateGroupNamePolicy`: FfiPermissionPolicy,
    var `updateGroupDescriptionPolicy`: FfiPermissionPolicy,
    var `updateGroupImageUrlSquarePolicy`: FfiPermissionPolicy,
    var `updateGroupPinnedFrameUrlPolicy`: FfiPermissionPolicy,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiPermissionPolicySet :
    FfiConverterRustBuffer<FfiPermissionPolicySet> {
    override fun read(buf: ByteBuffer): FfiPermissionPolicySet {
        return FfiPermissionPolicySet(
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
            FfiConverterTypeFfiPermissionPolicy.read(buf),
        )
    }

    override fun allocationSize(value: FfiPermissionPolicySet) = (
            FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`addMemberPolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`removeMemberPolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`addAdminPolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`removeAdminPolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`updateGroupNamePolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`updateGroupDescriptionPolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`updateGroupImageUrlSquarePolicy`) +
                    FfiConverterTypeFfiPermissionPolicy.allocationSize(value.`updateGroupPinnedFrameUrlPolicy`)
            )

    override fun write(value: FfiPermissionPolicySet, buf: ByteBuffer) {
        FfiConverterTypeFfiPermissionPolicy.write(value.`addMemberPolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`removeMemberPolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`addAdminPolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`removeAdminPolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`updateGroupNamePolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`updateGroupDescriptionPolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`updateGroupImageUrlSquarePolicy`, buf)
        FfiConverterTypeFfiPermissionPolicy.write(value.`updateGroupPinnedFrameUrlPolicy`, buf)
    }
}


data class FfiPublishRequest(
    var `envelopes`: List<FfiEnvelope>,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiPublishRequest : FfiConverterRustBuffer<FfiPublishRequest> {
    override fun read(buf: ByteBuffer): FfiPublishRequest {
        return FfiPublishRequest(
            FfiConverterSequenceTypeFfiEnvelope.read(buf),
        )
    }

    override fun allocationSize(value: FfiPublishRequest) = (
            FfiConverterSequenceTypeFfiEnvelope.allocationSize(value.`envelopes`)
            )

    override fun write(value: FfiPublishRequest, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiEnvelope.write(value.`envelopes`, buf)
    }
}


data class FfiV2BatchQueryRequest(
    var `requests`: List<FfiV2QueryRequest>,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2BatchQueryRequest :
    FfiConverterRustBuffer<FfiV2BatchQueryRequest> {
    override fun read(buf: ByteBuffer): FfiV2BatchQueryRequest {
        return FfiV2BatchQueryRequest(
            FfiConverterSequenceTypeFfiV2QueryRequest.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2BatchQueryRequest) = (
            FfiConverterSequenceTypeFfiV2QueryRequest.allocationSize(value.`requests`)
            )

    override fun write(value: FfiV2BatchQueryRequest, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiV2QueryRequest.write(value.`requests`, buf)
    }
}


data class FfiV2BatchQueryResponse(
    var `responses`: List<FfiV2QueryResponse>,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2BatchQueryResponse :
    FfiConverterRustBuffer<FfiV2BatchQueryResponse> {
    override fun read(buf: ByteBuffer): FfiV2BatchQueryResponse {
        return FfiV2BatchQueryResponse(
            FfiConverterSequenceTypeFfiV2QueryResponse.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2BatchQueryResponse) = (
            FfiConverterSequenceTypeFfiV2QueryResponse.allocationSize(value.`responses`)
            )

    override fun write(value: FfiV2BatchQueryResponse, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiV2QueryResponse.write(value.`responses`, buf)
    }
}


data class FfiV2QueryRequest(
    var `contentTopics`: List<kotlin.String>,
    var `startTimeNs`: kotlin.ULong,
    var `endTimeNs`: kotlin.ULong,
    var `pagingInfo`: FfiPagingInfo?,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2QueryRequest : FfiConverterRustBuffer<FfiV2QueryRequest> {
    override fun read(buf: ByteBuffer): FfiV2QueryRequest {
        return FfiV2QueryRequest(
            FfiConverterSequenceString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalTypeFfiPagingInfo.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2QueryRequest) = (
            FfiConverterSequenceString.allocationSize(value.`contentTopics`) +
                    FfiConverterULong.allocationSize(value.`startTimeNs`) +
                    FfiConverterULong.allocationSize(value.`endTimeNs`) +
                    FfiConverterOptionalTypeFfiPagingInfo.allocationSize(value.`pagingInfo`)
            )

    override fun write(value: FfiV2QueryRequest, buf: ByteBuffer) {
        FfiConverterSequenceString.write(value.`contentTopics`, buf)
        FfiConverterULong.write(value.`startTimeNs`, buf)
        FfiConverterULong.write(value.`endTimeNs`, buf)
        FfiConverterOptionalTypeFfiPagingInfo.write(value.`pagingInfo`, buf)
    }
}


data class FfiV2QueryResponse(
    var `envelopes`: List<FfiEnvelope>,
    var `pagingInfo`: FfiPagingInfo?,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2QueryResponse : FfiConverterRustBuffer<FfiV2QueryResponse> {
    override fun read(buf: ByteBuffer): FfiV2QueryResponse {
        return FfiV2QueryResponse(
            FfiConverterSequenceTypeFfiEnvelope.read(buf),
            FfiConverterOptionalTypeFfiPagingInfo.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2QueryResponse) = (
            FfiConverterSequenceTypeFfiEnvelope.allocationSize(value.`envelopes`) +
                    FfiConverterOptionalTypeFfiPagingInfo.allocationSize(value.`pagingInfo`)
            )

    override fun write(value: FfiV2QueryResponse, buf: ByteBuffer) {
        FfiConverterSequenceTypeFfiEnvelope.write(value.`envelopes`, buf)
        FfiConverterOptionalTypeFfiPagingInfo.write(value.`pagingInfo`, buf)
    }
}


data class FfiV2SubscribeRequest(
    var `contentTopics`: List<kotlin.String>,
) {

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiV2SubscribeRequest :
    FfiConverterRustBuffer<FfiV2SubscribeRequest> {
    override fun read(buf: ByteBuffer): FfiV2SubscribeRequest {
        return FfiV2SubscribeRequest(
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: FfiV2SubscribeRequest) = (
            FfiConverterSequenceString.allocationSize(value.`contentTopics`)
            )

    override fun write(value: FfiV2SubscribeRequest, buf: ByteBuffer) {
        FfiConverterSequenceString.write(value.`contentTopics`, buf)
    }
}


enum class FfiConsentEntityType {

    CONVERSATION_ID,
    INBOX_ID,
    ADDRESS;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiConsentEntityType : FfiConverterRustBuffer<FfiConsentEntityType> {
    override fun read(buf: ByteBuffer) = try {
        FfiConsentEntityType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiConsentEntityType) = 4UL

    override fun write(value: FfiConsentEntityType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiConsentState {

    UNKNOWN,
    ALLOWED,
    DENIED;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiConsentState : FfiConverterRustBuffer<FfiConsentState> {
    override fun read(buf: ByteBuffer) = try {
        FfiConsentState.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiConsentState) = 4UL

    override fun write(value: FfiConsentState, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiConversationMessageKind {

    APPLICATION,
    MEMBERSHIP_CHANGE;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiConversationMessageKind :
    FfiConverterRustBuffer<FfiConversationMessageKind> {
    override fun read(buf: ByteBuffer) = try {
        FfiConversationMessageKind.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiConversationMessageKind) = 4UL

    override fun write(value: FfiConversationMessageKind, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiConversationType {

    GROUP,
    DM,
    SYNC;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiConversationType : FfiConverterRustBuffer<FfiConversationType> {
    override fun read(buf: ByteBuffer) = try {
        FfiConversationType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiConversationType) = 4UL

    override fun write(value: FfiConversationType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiDeliveryStatus {

    UNPUBLISHED,
    PUBLISHED,
    FAILED;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiDeliveryStatus : FfiConverterRustBuffer<FfiDeliveryStatus> {
    override fun read(buf: ByteBuffer) = try {
        FfiDeliveryStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiDeliveryStatus) = 4UL

    override fun write(value: FfiDeliveryStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiDeviceSyncKind {

    MESSAGES,
    CONSENT;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiDeviceSyncKind : FfiConverterRustBuffer<FfiDeviceSyncKind> {
    override fun read(buf: ByteBuffer) = try {
        FfiDeviceSyncKind.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiDeviceSyncKind) = 4UL

    override fun write(value: FfiDeviceSyncKind, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiDirection {

    ASCENDING,
    DESCENDING;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiDirection : FfiConverterRustBuffer<FfiDirection> {
    override fun read(buf: ByteBuffer) = try {
        FfiDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiDirection) = 4UL

    override fun write(value: FfiDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiGroupPermissionsOptions {

    ALL_MEMBERS,
    ADMIN_ONLY,
    CUSTOM_POLICY;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiGroupPermissionsOptions :
    FfiConverterRustBuffer<FfiGroupPermissionsOptions> {
    override fun read(buf: ByteBuffer) = try {
        FfiGroupPermissionsOptions.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiGroupPermissionsOptions) = 4UL

    override fun write(value: FfiGroupPermissionsOptions, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiMetadataField {

    GROUP_NAME,
    DESCRIPTION,
    IMAGE_URL_SQUARE,
    PINNED_FRAME_URL;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiMetadataField : FfiConverterRustBuffer<FfiMetadataField> {
    override fun read(buf: ByteBuffer) = try {
        FfiMetadataField.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiMetadataField) = 4UL

    override fun write(value: FfiMetadataField, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiPermissionLevel {

    MEMBER,
    ADMIN,
    SUPER_ADMIN;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiPermissionLevel : FfiConverterRustBuffer<FfiPermissionLevel> {
    override fun read(buf: ByteBuffer) = try {
        FfiPermissionLevel.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiPermissionLevel) = 4UL

    override fun write(value: FfiPermissionLevel, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiPermissionPolicy {

    ALLOW,
    DENY,
    ADMIN,
    SUPER_ADMIN,
    DOES_NOT_EXIST,
    OTHER;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiPermissionPolicy : FfiConverterRustBuffer<FfiPermissionPolicy> {
    override fun read(buf: ByteBuffer) = try {
        FfiPermissionPolicy.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiPermissionPolicy) = 4UL

    override fun write(value: FfiPermissionPolicy, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


enum class FfiPermissionUpdateType {

    ADD_MEMBER,
    REMOVE_MEMBER,
    ADD_ADMIN,
    REMOVE_ADMIN,
    UPDATE_METADATA;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiPermissionUpdateType :
    FfiConverterRustBuffer<FfiPermissionUpdateType> {
    override fun read(buf: ByteBuffer) = try {
        FfiPermissionUpdateType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiPermissionUpdateType) = 4UL

    override fun write(value: FfiPermissionUpdateType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


sealed class FfiPreferenceUpdate {

    data class Hmac(
        val `key`: kotlin.ByteArray,
    ) : FfiPreferenceUpdate() {
        companion object
    }


    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiPreferenceUpdate : FfiConverterRustBuffer<FfiPreferenceUpdate> {
    override fun read(buf: ByteBuffer): FfiPreferenceUpdate {
        return when (buf.getInt()) {
            1 -> FfiPreferenceUpdate.Hmac(
                FfiConverterByteArray.read(buf),
            )

            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: FfiPreferenceUpdate) = when (value) {
        is FfiPreferenceUpdate.Hmac -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                    4UL
                            + FfiConverterByteArray.allocationSize(value.`key`)
                    )
        }
    }

    override fun write(value: FfiPreferenceUpdate, buf: ByteBuffer) {
        when (value) {
            is FfiPreferenceUpdate.Hmac -> {
                buf.putInt(1)
                FfiConverterByteArray.write(value.`key`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}


enum class FfiSortDirection {

    UNSPECIFIED,
    ASCENDING,
    DESCENDING;

    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeFfiSortDirection : FfiConverterRustBuffer<FfiSortDirection> {
    override fun read(buf: ByteBuffer) = try {
        FfiSortDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FfiSortDirection) = 4UL

    override fun write(value: FfiSortDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}


sealed class FfiSubscribeException(message: String) : kotlin.Exception(message) {

    class Subscribe(message: String) : FfiSubscribeException(message)

    class Storage(message: String) : FfiSubscribeException(message)


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<FfiSubscribeException> {
        override fun lift(error_buf: RustBuffer.ByValue): FfiSubscribeException =
            FfiConverterTypeFfiSubscribeError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeFfiSubscribeError : FfiConverterRustBuffer<FfiSubscribeException> {
    override fun read(buf: ByteBuffer): FfiSubscribeException {

        return when (buf.getInt()) {
            1 -> FfiSubscribeException.Subscribe(FfiConverterString.read(buf))
            2 -> FfiSubscribeException.Storage(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    }

    override fun allocationSize(value: FfiSubscribeException): ULong {
        return 4UL
    }

    override fun write(value: FfiSubscribeException, buf: ByteBuffer) {
        when (value) {
            is FfiSubscribeException.Subscribe -> {
                buf.putInt(1)
                Unit
            }

            is FfiSubscribeException.Storage -> {
                buf.putInt(2)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}


sealed class GenericException(message: String) : kotlin.Exception(message) {

    class Client(message: String) : GenericException(message)

    class ClientBuilder(message: String) : GenericException(message)

    class Storage(message: String) : GenericException(message)

    class ApiException(message: String) : GenericException(message)

    class GroupException(message: String) : GenericException(message)

    class Signature(message: String) : GenericException(message)

    class GroupMetadata(message: String) : GenericException(message)

    class GroupMutablePermissions(message: String) : GenericException(message)

    class Generic(message: String) : GenericException(message)

    class SignatureRequestException(message: String) : GenericException(message)

    class Erc1271SignatureException(message: String) : GenericException(message)

    class Verifier(message: String) : GenericException(message)

    class FailedToConvertToU32(message: String) : GenericException(message)

    class Association(message: String) : GenericException(message)

    class DeviceSync(message: String) : GenericException(message)

    class Identity(message: String) : GenericException(message)


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<GenericException> {
        override fun lift(error_buf: RustBuffer.ByValue): GenericException =
            FfiConverterTypeGenericError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeGenericError : FfiConverterRustBuffer<GenericException> {
    override fun read(buf: ByteBuffer): GenericException {

        return when (buf.getInt()) {
            1 -> GenericException.Client(FfiConverterString.read(buf))
            2 -> GenericException.ClientBuilder(FfiConverterString.read(buf))
            3 -> GenericException.Storage(FfiConverterString.read(buf))
            4 -> GenericException.ApiException(FfiConverterString.read(buf))
            5 -> GenericException.GroupException(FfiConverterString.read(buf))
            6 -> GenericException.Signature(FfiConverterString.read(buf))
            7 -> GenericException.GroupMetadata(FfiConverterString.read(buf))
            8 -> GenericException.GroupMutablePermissions(FfiConverterString.read(buf))
            9 -> GenericException.Generic(FfiConverterString.read(buf))
            10 -> GenericException.SignatureRequestException(FfiConverterString.read(buf))
            11 -> GenericException.Erc1271SignatureException(FfiConverterString.read(buf))
            12 -> GenericException.Verifier(FfiConverterString.read(buf))
            13 -> GenericException.FailedToConvertToU32(FfiConverterString.read(buf))
            14 -> GenericException.Association(FfiConverterString.read(buf))
            15 -> GenericException.DeviceSync(FfiConverterString.read(buf))
            16 -> GenericException.Identity(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    }

    override fun allocationSize(value: GenericException): ULong {
        return 4UL
    }

    override fun write(value: GenericException, buf: ByteBuffer) {
        when (value) {
            is GenericException.Client -> {
                buf.putInt(1)
                Unit
            }

            is GenericException.ClientBuilder -> {
                buf.putInt(2)
                Unit
            }

            is GenericException.Storage -> {
                buf.putInt(3)
                Unit
            }

            is GenericException.ApiException -> {
                buf.putInt(4)
                Unit
            }

            is GenericException.GroupException -> {
                buf.putInt(5)
                Unit
            }

            is GenericException.Signature -> {
                buf.putInt(6)
                Unit
            }

            is GenericException.GroupMetadata -> {
                buf.putInt(7)
                Unit
            }

            is GenericException.GroupMutablePermissions -> {
                buf.putInt(8)
                Unit
            }

            is GenericException.Generic -> {
                buf.putInt(9)
                Unit
            }

            is GenericException.SignatureRequestException -> {
                buf.putInt(10)
                Unit
            }

            is GenericException.Erc1271SignatureException -> {
                buf.putInt(11)
                Unit
            }

            is GenericException.Verifier -> {
                buf.putInt(12)
                Unit
            }

            is GenericException.FailedToConvertToU32 -> {
                buf.putInt(13)
                Unit
            }

            is GenericException.Association -> {
                buf.putInt(14)
                Unit
            }

            is GenericException.DeviceSync -> {
                buf.putInt(15)
                Unit
            }

            is GenericException.Identity -> {
                buf.putInt(16)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}


sealed class SigningException(message: String) : kotlin.Exception(message) {

    class Generic(message: String) : SigningException(message)


    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SigningException> {
        override fun lift(error_buf: RustBuffer.ByValue): SigningException =
            FfiConverterTypeSigningError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeSigningError : FfiConverterRustBuffer<SigningException> {
    override fun read(buf: ByteBuffer): SigningException {

        return when (buf.getInt()) {
            1 -> SigningException.Generic(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    }

    override fun allocationSize(value: SigningException): ULong {
        return 4UL
    }

    override fun write(value: SigningException, buf: ByteBuffer) {
        when (value) {
            is SigningException.Generic -> {
                buf.putInt(1)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}


public interface FfiInboxOwner {

    fun `getAddress`(): kotlin.String

    fun `sign`(`text`: kotlin.String): kotlin.ByteArray

    companion object
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceFfiInboxOwner {
    internal object `getAddress` : UniffiCallbackInterfaceFfiInboxOwnerMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `uniffiOutReturn`: RustBuffer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiInboxOwner.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`getAddress`(
                )
            }
            val writeReturn =
                { value: kotlin.String -> uniffiOutReturn.setValue(FfiConverterString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object `sign` : UniffiCallbackInterfaceFfiInboxOwnerMethod1 {
        override fun callback(
            `uniffiHandle`: Long,
            `text`: RustBuffer.ByValue,
            `uniffiOutReturn`: RustBuffer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeFfiInboxOwner.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`sign`(
                    FfiConverterString.lift(`text`),
                )
            }
            val writeReturn = { value: kotlin.ByteArray ->
                uniffiOutReturn.setValue(
                    FfiConverterByteArray.lower(value)
                )
            }
            uniffiTraitInterfaceCallWithError(
                uniffiCallStatus,
                makeCall,
                writeReturn,
                { e: SigningException -> FfiConverterTypeSigningError.lower(e) }
            )
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeFfiInboxOwner.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceFfiInboxOwner.UniffiByValue(
        `getAddress`,
        `sign`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_xmtpv3_fn_init_callback_vtable_ffiinboxowner(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeFfiInboxOwner : FfiConverterCallbackInterface<FfiInboxOwner>()


/**
 * @suppress
 */
public object FfiConverterOptionalULong : FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalLong : FfiConverterRustBuffer<kotlin.Long?> {
    override fun read(buf: ByteBuffer): kotlin.Long? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterLong.read(buf)
    }

    override fun allocationSize(value: kotlin.Long?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterLong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Long?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterLong.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalString : FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalByteArray : FfiConverterRustBuffer<kotlin.ByteArray?> {
    override fun read(buf: ByteBuffer): kotlin.ByteArray? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterByteArray.read(buf)
    }

    override fun allocationSize(value: kotlin.ByteArray?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterByteArray.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ByteArray?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterByteArray.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiSignatureRequest :
    FfiConverterRustBuffer<FfiSignatureRequest?> {
    override fun read(buf: ByteBuffer): FfiSignatureRequest? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiSignatureRequest.read(buf)
    }

    override fun allocationSize(value: FfiSignatureRequest?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiSignatureRequest.allocationSize(value)
        }
    }

    override fun write(value: FfiSignatureRequest?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiSignatureRequest.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiCursor : FfiConverterRustBuffer<FfiCursor?> {
    override fun read(buf: ByteBuffer): FfiCursor? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiCursor.read(buf)
    }

    override fun allocationSize(value: FfiCursor?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiCursor.allocationSize(value)
        }
    }

    override fun write(value: FfiCursor?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiCursor.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiPagingInfo : FfiConverterRustBuffer<FfiPagingInfo?> {
    override fun read(buf: ByteBuffer): FfiPagingInfo? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiPagingInfo.read(buf)
    }

    override fun allocationSize(value: FfiPagingInfo?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiPagingInfo.allocationSize(value)
        }
    }

    override fun write(value: FfiPagingInfo?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiPagingInfo.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiPermissionPolicySet :
    FfiConverterRustBuffer<FfiPermissionPolicySet?> {
    override fun read(buf: ByteBuffer): FfiPermissionPolicySet? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiPermissionPolicySet.read(buf)
    }

    override fun allocationSize(value: FfiPermissionPolicySet?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiPermissionPolicySet.allocationSize(value)
        }
    }

    override fun write(value: FfiPermissionPolicySet?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiPermissionPolicySet.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiConsentState : FfiConverterRustBuffer<FfiConsentState?> {
    override fun read(buf: ByteBuffer): FfiConsentState? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiConsentState.read(buf)
    }

    override fun allocationSize(value: FfiConsentState?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiConsentState.allocationSize(value)
        }
    }

    override fun write(value: FfiConsentState?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiConsentState.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiConversationType :
    FfiConverterRustBuffer<FfiConversationType?> {
    override fun read(buf: ByteBuffer): FfiConversationType? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiConversationType.read(buf)
    }

    override fun allocationSize(value: FfiConversationType?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiConversationType.allocationSize(value)
        }
    }

    override fun write(value: FfiConversationType?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiConversationType.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiDeliveryStatus :
    FfiConverterRustBuffer<FfiDeliveryStatus?> {
    override fun read(buf: ByteBuffer): FfiDeliveryStatus? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiDeliveryStatus.read(buf)
    }

    override fun allocationSize(value: FfiDeliveryStatus?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiDeliveryStatus.allocationSize(value)
        }
    }

    override fun write(value: FfiDeliveryStatus?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiDeliveryStatus.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiDirection : FfiConverterRustBuffer<FfiDirection?> {
    override fun read(buf: ByteBuffer): FfiDirection? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiDirection.read(buf)
    }

    override fun allocationSize(value: FfiDirection?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiDirection.allocationSize(value)
        }
    }

    override fun write(value: FfiDirection?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiDirection.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiGroupPermissionsOptions :
    FfiConverterRustBuffer<FfiGroupPermissionsOptions?> {
    override fun read(buf: ByteBuffer): FfiGroupPermissionsOptions? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiGroupPermissionsOptions.read(buf)
    }

    override fun allocationSize(value: FfiGroupPermissionsOptions?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiGroupPermissionsOptions.allocationSize(value)
        }
    }

    override fun write(value: FfiGroupPermissionsOptions?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiGroupPermissionsOptions.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterOptionalTypeFfiMetadataField : FfiConverterRustBuffer<FfiMetadataField?> {
    override fun read(buf: ByteBuffer): FfiMetadataField? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFfiMetadataField.read(buf)
    }

    override fun allocationSize(value: FfiMetadataField?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFfiMetadataField.allocationSize(value)
        }
    }

    override fun write(value: FfiMetadataField?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFfiMetadataField.write(value, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceString : FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceByteArray : FfiConverterRustBuffer<List<kotlin.ByteArray>> {
    override fun read(buf: ByteBuffer): List<kotlin.ByteArray> {
        val len = buf.getInt()
        return List<kotlin.ByteArray>(len) {
            FfiConverterByteArray.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.ByteArray>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterByteArray.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.ByteArray>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterByteArray.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiConversation :
    FfiConverterRustBuffer<List<FfiConversation>> {
    override fun read(buf: ByteBuffer): List<FfiConversation> {
        val len = buf.getInt()
        return List<FfiConversation>(len) {
            FfiConverterTypeFfiConversation.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiConversation>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiConversation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiConversation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiConversation.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiConsent : FfiConverterRustBuffer<List<FfiConsent>> {
    override fun read(buf: ByteBuffer): List<FfiConsent> {
        val len = buf.getInt()
        return List<FfiConsent>(len) {
            FfiConverterTypeFfiConsent.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiConsent>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiConsent.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiConsent>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiConsent.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiConversationMember :
    FfiConverterRustBuffer<List<FfiConversationMember>> {
    override fun read(buf: ByteBuffer): List<FfiConversationMember> {
        val len = buf.getInt()
        return List<FfiConversationMember>(len) {
            FfiConverterTypeFfiConversationMember.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiConversationMember>): ULong {
        val sizeForLength = 4UL
        val sizeForItems =
            value.map { FfiConverterTypeFfiConversationMember.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiConversationMember>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiConversationMember.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiEnvelope : FfiConverterRustBuffer<List<FfiEnvelope>> {
    override fun read(buf: ByteBuffer): List<FfiEnvelope> {
        val len = buf.getInt()
        return List<FfiEnvelope>(len) {
            FfiConverterTypeFfiEnvelope.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiEnvelope>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiEnvelope.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiEnvelope>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiEnvelope.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiHmacKey : FfiConverterRustBuffer<List<FfiHmacKey>> {
    override fun read(buf: ByteBuffer): List<FfiHmacKey> {
        val len = buf.getInt()
        return List<FfiHmacKey>(len) {
            FfiConverterTypeFfiHmacKey.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiHmacKey>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiHmacKey.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiHmacKey>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiHmacKey.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiInboxState : FfiConverterRustBuffer<List<FfiInboxState>> {
    override fun read(buf: ByteBuffer): List<FfiInboxState> {
        val len = buf.getInt()
        return List<FfiInboxState>(len) {
            FfiConverterTypeFfiInboxState.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiInboxState>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiInboxState.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiInboxState>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiInboxState.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiInstallation :
    FfiConverterRustBuffer<List<FfiInstallation>> {
    override fun read(buf: ByteBuffer): List<FfiInstallation> {
        val len = buf.getInt()
        return List<FfiInstallation>(len) {
            FfiConverterTypeFfiInstallation.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiInstallation>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiInstallation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiInstallation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiInstallation.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiMessage : FfiConverterRustBuffer<List<FfiMessage>> {
    override fun read(buf: ByteBuffer): List<FfiMessage> {
        val len = buf.getInt()
        return List<FfiMessage>(len) {
            FfiConverterTypeFfiMessage.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiMessage>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiMessage.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiMessage>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiMessage.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiV2QueryRequest :
    FfiConverterRustBuffer<List<FfiV2QueryRequest>> {
    override fun read(buf: ByteBuffer): List<FfiV2QueryRequest> {
        val len = buf.getInt()
        return List<FfiV2QueryRequest>(len) {
            FfiConverterTypeFfiV2QueryRequest.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiV2QueryRequest>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiV2QueryRequest.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiV2QueryRequest>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiV2QueryRequest.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiV2QueryResponse :
    FfiConverterRustBuffer<List<FfiV2QueryResponse>> {
    override fun read(buf: ByteBuffer): List<FfiV2QueryResponse> {
        val len = buf.getInt()
        return List<FfiV2QueryResponse>(len) {
            FfiConverterTypeFfiV2QueryResponse.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiV2QueryResponse>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFfiV2QueryResponse.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiV2QueryResponse>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiV2QueryResponse.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterSequenceTypeFfiPreferenceUpdate :
    FfiConverterRustBuffer<List<FfiPreferenceUpdate>> {
    override fun read(buf: ByteBuffer): List<FfiPreferenceUpdate> {
        val len = buf.getInt()
        return List<FfiPreferenceUpdate>(len) {
            FfiConverterTypeFfiPreferenceUpdate.read(buf)
        }
    }

    override fun allocationSize(value: List<FfiPreferenceUpdate>): ULong {
        val sizeForLength = 4UL
        val sizeForItems =
            value.map { FfiConverterTypeFfiPreferenceUpdate.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FfiPreferenceUpdate>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFfiPreferenceUpdate.write(it, buf)
        }
    }
}


/**
 * @suppress
 */
public object FfiConverterMapStringBoolean :
    FfiConverterRustBuffer<Map<kotlin.String, kotlin.Boolean>> {
    override fun read(buf: ByteBuffer): Map<kotlin.String, kotlin.Boolean> {
        val len = buf.getInt()
        return buildMap<kotlin.String, kotlin.Boolean>(len) {
            repeat(len) {
                val k = FfiConverterString.read(buf)
                val v = FfiConverterBoolean.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<kotlin.String, kotlin.Boolean>): ULong {
        val spaceForMapSize = 4UL
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterString.allocationSize(k) +
                    FfiConverterBoolean.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<kotlin.String, kotlin.Boolean>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.iterator().forEach { (k, v) ->
            FfiConverterString.write(k, buf)
            FfiConverterBoolean.write(v, buf)
        }
    }
}


/**
 * It returns a new client of the specified `inbox_id`.
 * Note that the `inbox_id` must be either brand new or already associated with the `account_address`.
 * i.e. `inbox_id` cannot be associated with another account address.
 *
 * Prior to calling this function, it's suggested to form `inbox_id`, `account_address`, and `nonce` like below.
 *
 * ```text
 * inbox_id = get_inbox_id_for_address(account_address)
 * nonce = 0
 *
 * // if inbox_id is not associated, we will create new one.
 * if !inbox_id {
 * if !legacy_key { nonce = random_u64() }
 * inbox_id = generate_inbox_id(account_address, nonce)
 * } // Otherwise, we will just use the inbox and ignore the nonce.
 * db_path = $inbox_id-$env
 *
 * xmtp.create_client(account_address, nonce, inbox_id, Option<legacy_signed_private_key_proto>)
 * ```
 */
@Throws(GenericException::class)
@Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
suspend fun `createClient`(
    `host`: kotlin.String,
    `isSecure`: kotlin.Boolean,
    `db`: kotlin.String?,
    `encryptionKey`: kotlin.ByteArray?,
    `inboxId`: kotlin.String,
    `accountAddress`: kotlin.String,
    `nonce`: kotlin.ULong,
    `legacySignedPrivateKeyProto`: kotlin.ByteArray?,
    `historySyncUrl`: kotlin.String?,
): FfiXmtpClient {
    return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_create_client(
            FfiConverterString.lower(`host`),
            FfiConverterBoolean.lower(`isSecure`),
            FfiConverterOptionalString.lower(`db`),
            FfiConverterOptionalByteArray.lower(`encryptionKey`),
            FfiConverterString.lower(`inboxId`),
            FfiConverterString.lower(`accountAddress`),
            FfiConverterULong.lower(`nonce`),
            FfiConverterOptionalByteArray.lower(`legacySignedPrivateKeyProto`),
            FfiConverterOptionalString.lower(`historySyncUrl`),
        ),
        { future, callback, continuation ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                future,
                callback,
                continuation
            )
        },
        { future, continuation ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                future,
                continuation
            )
        },
        { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeFfiXmtpClient.lift(it) },
        // Error FFI converter
        GenericException.ErrorHandler,
    )
}

@Throws(GenericException::class)
@Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
suspend fun `createV2Client`(`host`: kotlin.String, `isSecure`: kotlin.Boolean): FfiV2ApiClient {
    return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_create_v2_client(
            FfiConverterString.lower(`host`),
            FfiConverterBoolean.lower(`isSecure`),
        ),
        { future, callback, continuation ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_pointer(
                future,
                callback,
                continuation
            )
        },
        { future, continuation ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_pointer(
                future,
                continuation
            )
        },
        { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeFfiV2ApiClient.lift(it) },
        // Error FFI converter
        GenericException.ErrorHandler,
    )
}

@Throws(GenericException::class)
fun `diffieHellmanK256`(
    `privateKeyBytes`: kotlin.ByteArray,
    `publicKeyBytes`: kotlin.ByteArray,
): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_diffie_hellman_k256(
                FfiConverterByteArray.lower(`privateKeyBytes`),
                FfiConverterByteArray.lower(`publicKeyBytes`),
                _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `generateInboxId`(`accountAddress`: kotlin.String, `nonce`: kotlin.ULong): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_generate_inbox_id(
                FfiConverterString.lower(`accountAddress`),
                FfiConverterULong.lower(`nonce`),
                _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `generatePrivatePreferencesTopicIdentifier`(`privateKey`: kotlin.ByteArray): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_generate_private_preferences_topic_identifier(
                FfiConverterByteArray.lower(`privateKey`), _status
            )
        }
    )
}


@Throws(GenericException::class)
@Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
suspend fun `getInboxIdForAddress`(
    `host`: kotlin.String,
    `isSecure`: kotlin.Boolean,
    `accountAddress`: kotlin.String,
): kotlin.String? {
    return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_get_inbox_id_for_address(
            FfiConverterString.lower(
                `host`
            ),
            FfiConverterBoolean.lower(`isSecure`), FfiConverterString.lower(`accountAddress`),
        ),
        { future, callback, continuation ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_poll_rust_buffer(
                future,
                callback,
                continuation
            )
        },
        { future, continuation ->
            UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_complete_rust_buffer(
                future,
                continuation
            )
        },
        { future -> UniffiLib.INSTANCE.ffi_xmtpv3_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterOptionalString.lift(it) },
        // Error FFI converter
        GenericException.ErrorHandler,
    )
}

fun `getVersionInfo`(): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCall() { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_get_version_info(
                _status
            )
        }
    )
}

fun `keccak256`(`input`: kotlin.ByteArray): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCall() { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_keccak256(
                FfiConverterByteArray.lower(`input`), _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `publicKeyFromPrivateKeyK256`(`privateKeyBytes`: kotlin.ByteArray): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_public_key_from_private_key_k256(
                FfiConverterByteArray.lower(`privateKeyBytes`), _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `recoverAddress`(
    `signatureBytes`: kotlin.ByteArray,
    `predigestMessage`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_recover_address(
                FfiConverterByteArray.lower(`signatureBytes`),
                FfiConverterString.lower(`predigestMessage`),
                _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `recoverPublicKeyK256Keccak256`(
    `message`: kotlin.ByteArray,
    `signature`: kotlin.ByteArray,
): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_recover_public_key_k256_keccak256(
                FfiConverterByteArray.lower(`message`),
                FfiConverterByteArray.lower(`signature`),
                _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `recoverPublicKeyK256Sha256`(
    `message`: kotlin.ByteArray,
    `signature`: kotlin.ByteArray,
): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_recover_public_key_k256_sha256(
                FfiConverterByteArray.lower(`message`),
                FfiConverterByteArray.lower(`signature`),
                _status
            )
        }
    )
}

fun `sha256`(`input`: kotlin.ByteArray): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCall() { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_sha256(
                FfiConverterByteArray.lower(`input`), _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `userPreferencesDecrypt`(
    `publicKey`: kotlin.ByteArray,
    `privateKey`: kotlin.ByteArray,
    `message`: kotlin.ByteArray,
): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_user_preferences_decrypt(
                FfiConverterByteArray.lower(`publicKey`),
                FfiConverterByteArray.lower(`privateKey`),
                FfiConverterByteArray.lower(`message`),
                _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `userPreferencesEncrypt`(
    `publicKey`: kotlin.ByteArray,
    `privateKey`: kotlin.ByteArray,
    `message`: kotlin.ByteArray,
): kotlin.ByteArray {
    return FfiConverterByteArray.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_user_preferences_encrypt(
                FfiConverterByteArray.lower(`publicKey`),
                FfiConverterByteArray.lower(`privateKey`),
                FfiConverterByteArray.lower(`message`),
                _status
            )
        }
    )
}


@Throws(GenericException::class)
fun `verifyK256Sha256`(
    `signedBy`: kotlin.ByteArray,
    `message`: kotlin.ByteArray,
    `signature`: kotlin.ByteArray,
    `recoveryId`: kotlin.UByte,
): kotlin.Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(GenericException) { _status ->
            UniffiLib.INSTANCE.uniffi_xmtpv3_fn_func_verify_k256_sha256(
                FfiConverterByteArray.lower(`signedBy`),
                FfiConverterByteArray.lower(`message`),
                FfiConverterByteArray.lower(`signature`),
                FfiConverterUByte.lower(`recoveryId`),
                _status
            )
        }
    )
}
    


